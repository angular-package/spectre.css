// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../property';
@use '../values/function/values.add.function' as *;
@use '../var';

// Status: REVIEW: Check
// The `z-index()` mixin.
@mixin z-index($value, $adjust: 0, $important: false, $dictionary: ()) {
  $z-index: ();
  @if type-of($value) == number {
    z-index: var.get(z index $value if($important, '!important', null), $adjust);
  } @else {
    @if type-of($value) == map {
      @each $key, $-value in $value {
        $value: map.set($value, $key, list.join(--get z-index, $-value));
      }

      $z-index: (z-index: $value);
    } @else {
      @each $value in if(list.separator($value) == comma, $value, ($value,)) {
        $z-index: map.merge($z-index, ($value: list.join(--get z-index, $value)));
      }

      $z-index: (z-index: $z-index);
    }
    @include property.variant($z-index, $important);
  }
}

// Examples.
// single
// div {
//   @include z-index(0); // z-index: var(--s-z-index-0);
// }

// @include z-index((0,));
// .z-index-0 {
//   z-index: var(--s-z-index-0);
// }

// multiple
// @include z-index((0, 1, 2));
// .z-index-0 {
//   z-index: var(--s-z-index-0);
// }
// .z-index-1 {
//   z-index: var(--s-z-index-1);
// }
// .z-index-2 {
//   z-index: var(--s-z-index-2);
// }

// multiple variants
// @include z-index(( 0: 0, 100: 1 ('+' 5), 200: 2 ));
// .z-index-0 {
//   z-index: var(--s-z-index-0);
// }
// .z-index-100 {
//   z-index: calc(var(--s-z-index-1) + 5);
// }
// .z-index-200 {
//   z-index: var(--s-z-index-2);
// }

// adjust
// @include z-index((0: 0 ('+' 5)));
// .z-index-0 {
//   z-index: calc(var(--s-z-index-0) + 5);
// }

// important
// @include z-index((1: 1 '!important'));
// .z-index-1 {
//   z-index: var(--s-z-index-1) !important;
// }

// @include z-index((0, 1, 100), true);
// .z-index-0 {
//   z-index: var(--s-z-index-0) !important;
// }
// .z-index-1 {
//   z-index: var(--s-z-index-1) !important;
// }
// .z-index-100 {
//   z-index: var(--s-z-index-100) !important;
// }
