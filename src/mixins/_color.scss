@use '../functions/color' as *;
@use '../variables' as *;

// Background color utility mixin
// The mixin contains the CSS class of the name prefixed with `bg-` and prefixed `#{$prefix}-bg-` with the given `$name`
// that includes the `background` color of the given `$color` CSS variable name, and `color` style equal to `light-color`
// depending on whether the given SCSS variable `$hex-color` lightness is below `60`.
// By default, $prefix is equal to the globally customizable $var-prefix.
@mixin bg-color-variant(
  $name: 'primary',
  $color: 'primary-color',
  $hex-color: $primary-color,
  $prefix: $var-prefix
) {
  .bg-#{$name}, .#{$prefix}-bg-#{$name} {
    // background: $color !important; // old spectre.
    background: color($color) !important;

    // old spectre.
    // @if (lightness($color) < 60) {
    // color: $light-color;
    // }
    @if (lightness($hex-color) < 60) {
      color: color('light-color');
    }
  }
}

// Text color utility mixin
// The mixin contains the twp CSS classes, the class of the name prefixed with `text-`, and prefixed `#{$prefix}-text-` with the given color `$name`
// that includes the `color` style of the given `$color` CSS variable name, also the class of the same name assigned to tag `a`.
// By default, `$prefix` is equal to the globally customizable `$var-prefix`.
@mixin text-color-variant(
  $name: 'primary',
  $color: 'primary-color',
  $prefix: $var-prefix
) {
  .text-#{$name}, .#{$prefix}-text-#{$name} {
    // color: $color !important; // old spectre.
    color: color($color) !important;
  }

  a.text-#{$name}, a.#{$prefix}-text-#{$name} {
    &:focus,
    &:hover {
      // color: darken($color, 5%); // old spectre.
      color: color($color, $lightness: -5%);
    }
    &:visited {
      // color: lighten($color, 5%);
      color: color($color, $lightness: +5%);
    }
  }
}
