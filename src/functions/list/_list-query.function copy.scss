// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../compare.function' as *;
@use 'index-condition.function' as *;
@use 'is/is-list-length.function' as *;
@use 'is/is-list.function' as *;
@use 'nth/list-nth-default.function' as *;

// Status: REVIEW: Check.
// The `list-query()` function.
@function list-query($list, $conditions: all, $values...) {
  $result: ();
  $fetch: list-nth-default($values, last, index);
  $values: index-condition($conditions, 'operand') or $values;

  @if not is-list($values) {
    $values: list.join($values, $fetch, $separator: list.separator($list));
  }

  @if is-list($list, 0) and is-list($values, 0) {
    $i: 1;
    @each $value in $values {
      @if not ($i == list.length($values)) {
        $index: -list-query($list, $conditions, $value, $fetch);

        // Add found indexes to result.
        $result: list.append(
          $result,
          if(is-list-length($index, 0), $index, null),
          $separator: list.separator($list)
        );
      }

      $i: $i + 1;
    }
  }

  @return if(
    is-list-length($result),
    if(is-list-length($result, '==', 1), list.nth($result, 1), $result),
    null
  );
}

// Private `-list-query()` function.
@function -list-query($list, $conditions, $operand, $fetch) {
  // Conditions.
  $adjust: index-condition($conditions, 'adjust') or 0;
  $get: index-condition($conditions, 'get') or $conditions;
  $occurrence: index-condition($conditions, 'occurrence');
  $operator: index-condition($conditions, 'operator') or '==';

  // Get result.
  $result: ();
  $i: 1;
  @each $value in $list {
    $result: if(
      compare($value, $operator, $operand),
      list.join($result, if($fetch == index, $i + $adjust, $value), $separator: list.separator($list)),
      $result
    );
    $i: $i + 1;
  }

  // Filter result using conditions.
  @if is-list-length($result) {
    // @if $occurrence {
    //   @if type-of($occurrence) == string {
    //     $result: if($occurrence == first, list.nth($result, 1), list.nth($result, list.length($result)));

    //   } @else {

    //   }
    // }

    @if $get == all {
      @if $fetch == quantity {
        $result: list.length($result);
      }
    }
  }

  // Return the result.
  @return if(is-list-length($result, '==', 1), list.nth($result, 1), $result);
}

// == equality
// ~= proximity (string)
// :== type of equal to
// :!= type of not equal to

// Structure.
// list-query(select(fetch), from(list), where(adjust-position) (operand, fetch)...)

// Examples.
// @debug list-query((1, 'c', 'a', 'c', 'bold army', 2, 'b', 3, 'c', 4, 'd'), ((any, first), '~='), 'c', 'a', 'bold ', index); // 2, 3, 5
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), all, 'c', 'a', 'bold ', index); // 6, 2, null
// @debug list-query(('a', 1, 'b', 2, 'c', 3, 'd'), (all, ':=='), string, index); // 1, 3, 5, 7

// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':=='), string, nth); // "a", "b", "c", "d"
// @debug list-query(('a', 1, 'b', 2, 'c', 3, 'd'), (all, ':=='), string, index); // 1, 3, 5, 7

// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':=='), string, number, index); //
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':!='), string, number, index); //

// @debug list-query((227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g'), ((all, first), ':=='), string, nth); //
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':!='), string, number, nth); //

// @debug list-query(((all, ), '>'), (227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g'), 226, 3, nth); //

@debug list-query((select: nth), (from: (227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g')), (where: '>', 226, 3), first); //
