// Modules.
@use '../../map/map.get.function' as map;
@use '../../values/values.map.function' as values;

// Functions.
@use 'color.alpha-var.function' as *;
@use 'color.hue-var.function' as *;
@use 'color.lightness-var.function' as *;
@use 'color.saturation-var.function' as *;

// Status: DONE
// The function `hsla-color()` returns the `hsla()` color from a CSS variables of the given `$name`.
@function hsla-color(
  $name,
  $hue: null,
  $saturation: null,
  $lightness: null,
  $alpha: null,
  $dictionary: ()
) {
  $color: values.map(
    $name,
    (name: list string),
    (lightness: number list, (alpha hue saturation: number list): map),
    (alpha: number list, (hue saturation: number list): map),
    (hue: number list, (saturation: number list): map),
    saturation
  );
  @return hsla(
    hue-var(map.get($color, name), map.get($color, hue, $hue), $dictionary: $dictionary),
    saturation-var(map.get($color, name), map.get($color, saturation, $saturation), $dictionary: $dictionary),
    lightness-var(
      map.get($color, name),
      if(type-of($lightness) == number, map.get($color, lightness, 0%) + $lightness, map.get($color, lightness) or $lightness),
      $dictionary: $dictionary
    ),
    alpha-var(map.get($color, name), map.get($color, alpha, $alpha), $dictionary: $dictionary)
  );
}

// Examples.
// string color name
// @debug hsla-color(light); // hsla(var(--s-light-color-h), var(--s-light-color-s), var(--s-light-color-l), var(--s-light-color-a))

// list color name
// @debug hsla-color((light,)); // hsla(var(--s-light-color-h), var(--s-light-color-s), var(--s-light-color-l), var(--s-light-color-a))
// @debug hsla-color((light color,)); // hsla(var(--s-light-color-h), var(--s-light-color-s), var(--s-light-color-l), var(--s-light-color-a))

// adjusted hue
// @debug hsla-color(dark, 3deg); // hsla(calc(var(--s-dark-color-h) + 3deg), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))

// adjusted hue + saturation
// @debug hsla-color(dark, 3deg, 5%); // hsla(calc(var(--s-dark-color-h) + 3deg), calc(var(--s-dark-color-s) + 5%), var(--s-dark-color-l), var(--s-dark-color-a))

// adjusted hue + saturation + lightness
// @debug hsla-color(dark, 3deg, 5%, 50%); // hsla(calc(var(--s-dark-color-h) + 3deg), calc(var(--s-dark-color-s) + 5%), calc(var(--s-dark-color-l) + 50%), var(--s-dark-color-a))

// adjusted hue + saturation + lightness + alpha
// @debug hsla-color(dark, 3deg, 5%, 50%, 0.1); // hsla(calc(var(--s-dark-color-h) + 3deg), calc(var(--s-dark-color-s) + 5%), calc(var(--s-dark-color-l) + 50%), calc(var(--s-dark-color-a) + 0.1))

// list modifiers
// @debug hsla-color((primary light) 1% 0.5 20deg 15%); // hsla(calc(var(--s-primary-color-light-h) + 20deg), calc(var(--s-primary-color-light-s) + 15%), calc(var(--s-primary-color-light-l) + 1%), calc(var(--s-primary-color-light-a) + 0.5))
// @debug hsla-color(primary-light 1% 0.5 20deg 15%); // hsla(calc(var(--s-primary-color-light-h) + 20deg), calc(var(--s-primary-color-light-s) + 15%), calc(var(--s-primary-color-light-l) + 1%), calc(var(--s-primary-color-light-a) + 0.5))

// list modifiers + parameter lightness
// @debug hsla-color(primary-light 1%, $lightness: 3%); // hsla(var(--s-primary-color-light-h), var(--s-primary-color-light-s), calc(var(--s-primary-color-light-l) + 4%), var(--s-primary-color-light-a))
// @debug hsla-color((primary light) 1%, $lightness: 3%); // hsla(var(--s-primary-color-light-h), var(--s-primary-color-light-s), calc(var(--s-primary-color-light-l) + 4%), var(--s-primary-color-light-a))
// @debug hsla-color((primary light) 1% 0.95, $lightness: 3%); // hsla(var(--s-primary-color-light-h), var(--s-primary-color-light-s), calc(var(--s-primary-color-light-l) + 4%), calc(var(--s-primary-color-light-a) + 0.95))

// map modifiers
// @debug hsla-color((primary light) (lightness: 1%, alpha: 0.95, hue: 20deg), $lightness: 3%); // hsla(calc(var(--s-primary-color-light-h) + 20deg), var(--s-primary-color-light-s), calc(var(--s-primary-color-light-l) + 4%), calc(var(--s-primary-color-light-a) + 0.95))
