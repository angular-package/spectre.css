// Sass.
@use 'sass:map';

// Variables.
@use '../variables/core' as *;
@use '../variables/unit-sizes' as *;

// Functions.
@use '../functions/class/class.function' as *;
@use '../functions/var/unit-var.function' as *;

// Mixins.
@use '../mixins/clearfix' as *;
@use '../mixins/position' as *;

$float: ('flex': 'flex') !default;
$position: ('position': 'p') !default;

 // TODO: Add to docs.

/*! Spectre.css: position | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
// .clearfix {
#{class('clearfix')} {
  @include clearfix;
}

/*! Spectre.css: position | float | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */

// .float-left {
#{class(('float', 'left'), (), $float)} {
  float: left !important;
}

// .float-right {
#{class(('float', 'right'), (), $float)} {
  float: right !important;
}

/*! Spectre.css: position | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */

// .p-relative {
#{class(('position', 'relative'), (), $position)} {
  position: relative !important;
}

// .p-absolute {
#{class(('position', 'absolute'), (), $position)} {
  position: absolute !important;
}

// .p-fixed {
#{class(('position', 'fixed'), (), $position)} {
  position: fixed !important;
}

// .p-sticky {
#{class(('position', 'sticky'), (), $position)} {
  position: sticky !important;
}

// .p-centered {
#{class(('position', 'centered'), (), $position)} {
  display: block;
  float: none;
  margin-right: auto;
  margin-left: auto;
}

/*! Spectre.css: position | flex | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */

// .flex-centered {
#{class(('flex', 'centered'))} {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Flex direction.
#{class(('flex', 'direction', 'column'))} {
  flex-direction: column;
}

#{class(('flex', 'direction', 'row'))} {
  flex-direction: row;
}

/*! Spectre.css: position | align-items | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */

// Align items.
#{class(('align', 'items', 'center'))} {
  align-items: center;
}

#{class(('align', 'items', 'start'))} {
  align-items: flex-start;
}

#{class(('align', 'items', 'end'))} {
  align-items: flex-end;
}


/*! Spectre.css: position | justify-content | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */

// Justify content.
#{class(('justify', 'content', 'center'))} {
  justify-content: center;
}

#{class(('justify', 'content', 'start'))} {
  justify-content: flex-start;
}

#{class(('justify', 'content', 'space', 'between'))} {
  justify-content: space-between;
}

#{class(('justify', 'content', 'space', 'around'))} {
  justify-content: space-around;
}

#{class(('justify', 'content', 'space', 'evenly'))} {
  justify-content: space-evenly;
}

#{class(('justify', 'content', 'end'))} {
  justify-content: flex-end;
}

// Remove from the unit size.
$-unit-size: map.remove($unit-size, 'rem');

 // TODO: Add to docs.
// Sides top, right, bottom, left.
@if type-of($-unit-size) == map {
  /*! Spectre.css: horizontal-offset | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
  @each $key, $value in $-unit-size {
    @include horizontal-offset($key, ('unit', #{$key}));
  }

  /*! Spectre.css: vertical-offset | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
  @each $key, $value in $-unit-size {
    @include vertical-offset($key, ('unit', #{$key}));
  }

}

// Spacing. // REVIEW: Add to docs.
@if type-of($-unit-size) == map {
  /*! Spectre.css: margin | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
  @each $key, $value in $-unit-size {
    @include margin-variant($key, ('unit', #{$key}));
  }

  /*! Spectre.css: padding | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
  @each $key, $value in $-unit-size {
    @include padding-variant($key, ('unit', #{$key}));
  }
}

// Gap. // TODO: Add to docs.
@if type-of($-unit-size) == map {
  /*! Spectre.css: position | gap | utilities | color-scheme: #{$color-scheme} | MIT License | github.com/angular-package/spectre.css */
  @each $key, $value in $-unit-size {
    #{class(('gap', '#{$key}'))} {
      gap: unit-var('#{$key}');
    }
  }
}
