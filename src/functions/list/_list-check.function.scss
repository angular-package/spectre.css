// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../map/map-get-default.function' as *;
@use 'has/list-has-bool.function' as *;
@use 'has/list-has-list.function' as *;
@use 'has/list-has-map.function' as *;
@use 'has/list-has-number.function' as *;
@use 'has/list-has-string.function' as *;
@use 'has/type/list-has-types.function' as *;
@use 'has/value/list-has-values.function' as *;
@use 'is/is-list.function' as *;
@use 'list-index-type.function' as *;
@use 'list-index.function' as *;
@use 'list-nth.function' as *;
@use 'list-type-index.function' as *;

// Status: DONE
// The `list-check()` function.
@function list-check($list, $elements...) {
  $check: map-get-default($list, 'check', 'value');
  $condition: map-get-default($list, 'condition', 'all');
  $result: map-get-default($list, 'result', null);
  $list: map-get-default($list, 'list', $list);

  @if $check == value {
    @if $result == detailed {
      $result: (result: list-has-values($list, $condition, $elements...), details: list-index($list, $condition, $elements...));
    } @else {
      $result: list-has-values($list, $condition, $elements...);
    }

  } @else if $check == bool {
    @if $result == detailed {
      $result: (result: list-has-bool($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-bool($list, $condition, $elements...);
    }

  } @else if $check == list {
    @if $result == detailed {
      $result: (result: list-has-list($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-list($list, $condition, $elements...);
    }

  } @else if $check == number {
    @if $result == detailed {
      $result: (result: list-has-number($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-number($list, $condition, $elements...);
    }

  } @else if $check == map {
    @if $result == detailed {
      $result: (result: list-has-map($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-map($list, $condition, $elements...);
    }

  } @else if $check == string {
    @if $result == detailed {
      $result: (result: list-has-string($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-string($list, $condition, $elements...);
    }

  } @else if $check == type {
    @if $result == detailed {
      $result: (result: list-has-types($list, $condition, $elements...), details: list-type-index($list, $elements...));
    } @else {
      $result: list-has-types($list, $condition, $elements...);
    }
  }

  @return $result;
}

// Examples.
// -- all
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', true, null, 'c', 1, 2); // true
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', false, 'c', true, null, 1, 2); // true
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', false, true, null, 1, 2, ('a', 'c')); // false

// -- any
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', true, null, 'c', 1, 2); // true
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', false, 'c', true, null, 1, 2); // true
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', false, true, null, 1, 2, ('a', 'c')); // false

// Number.
// @debug 'Simple -- Number';
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 1, 2); // true: list has all given elements 1 and 2
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 2); // true: list has given element 2
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 1, 2, 3); // false: list has no all given elements 1, 2 and 3

// String.
// @debug '-- String';
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'a'); // true: list has given element
// @debug list-check(('One word', 'b', 'c', true, false, null, 1, 2), 'c', 'b', 'One word'); // true: list has given elements
// @debug list-check(('Multiple words are defined', 'b', 'c', true, false, null, 1, 2), 'c', 'Multiple words are defined', 'One word'); // false: list has not all given elements

// Number config.
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2)), 1, 2); // true: list has all given elements 1 and 2
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), check: number)); // true: all given types must be in the given list
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), check: number), 1, 2); // true: list has all given elements
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), check: number), 1, 2, 3); // false: list has no all given elements

// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), check: number), '1', '2'); // false: no given number to check.
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), check: number), '1', 2); // true: no given number to check.

// Detailed
// -- Value
// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: value, // default
//   result: detailed
// ), 1, 2); // true: list has all given values 1 and 2

// -- Boolean
// @debug list-check((list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2), check: bool, condition: all, result: detailed)); // false: list must have all elements of boolean type
// @debug list-check((list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2), check: bool, condition: any, result: detailed)); // true: list must have at least one element of boolean type

// -- Number
// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: number,
//   result: detailed
// ), 1, 2); // true: list has all given values 1 and 2

// -- String
// @debug list-check((list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2), check: string, condition: all, result: detailed)); // false: list must have all elements of string type
// @debug list-check((list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2), check: string, condition: any, result: detailed)); // true: list must have at least one element of string type

// -- Type
// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: type,
//   result: detailed
// ), number); // true: list has all number type

// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: type,
//   result: detailed
// ), string, number); // true: list has string and number type

// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: type,
//   result: detailed
// ), map, string, number); // false: list has string and number type but does not have map

// @debug list-check((
//   list: ('a', 'b', 'c', 1, 2, 1, 2, true, false, null, 1, 2),
//   check: type,
//   condition: any,
//   result: detailed
// ), map, string, number); // true: list has must have any of the given types string, number or map

// @debug list-check((list: (1, 1, 1, 1), condition: (all, '=='), result: detailed), 1); // true
// @debug list-check((list: (1, 1, 1, 1), condition: (all, '>'), result: detailed), 1); // false
// @debug list-check((list: (1, 1, 1, 1), condition: (all, '>'), result: detailed), 0); // true
// @debug list-check((list: (1, 1, -1, 1), condition: (all, '>'), result: detailed), 0); // false
// @debug list-check((list: (1, 1, -1, 1), condition: (all, '>'), result: detailed), 0); // false
// @debug list-check((list: (1, 1, -1, 1), condition: all, result: detailed), 0); // false
