// Sass.
@use 'sass:list';

// Functions.
@use 'list.nths.function' as *;

// Examples.
$-list: ('a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5, 'f', 6, 'g', 7, 'h');
$-list-map: ((a: 1), b, (c: 2), 3, (d: 4));
$-list-bracketed: list.join([], list.join($-list, $-list-map));

// number
@debug nths($-list, 2); // 1
@debug nths($-list, -2); // 7
@debug nths($-list, -6); // 5
@debug nths($-list, 10); // 5
@debug nths($-list-map, 5); // (d: 4)
@debug nths($-list-bracketed, 16, 5); // [(a: 1), "c"]

// string
@debug nths($-list, first); // a
@debug nths($-list, last); // h

// multiple indexes number, string...
@debug nths($-list, 2, -1); // 1, "h"
@debug nths($-list, 2, -10); // 1, 3
@debug nths($-list, 2, 5, 6); // 1, "c", 3
@debug nths($-list, last, 2, 5, first, 6,); // "h", 1, "c", "a", 3

// single range (string/number '...' string/number)
@debug nths($-list, 2, '...', 4); // 1, "b", 2
@debug nths($-list, -2 '...' 1...); // 7, "h", "a"
@debug nths($-list, -10, '...', 5); // 3, "d", 4, "e", 5, "f", 6, "g", 7, "h", "a", 1, "b", 2, "c"
@debug nths($-list, first, '...', last); // "a", 1, "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h"

// multiple ranges (string/number '...' string/number)
@debug nths($-list, (2, '...', 4), (3, '...', 7)); // 1, "b", 2, "b", 2, "c", 3, "d"
@debug nths($-list, 2 '...' 4, 3 '...' 7); // 1, "b", 2, "b", 2, "c", 3, "d"
@debug nths($-list, 9 '...' last, 3 '...' 7); // "e", 5, "f", 6, "g", 7, "h", "b", 2, "c", 3, "d"

// single range (from: string/number)
@debug nths($-list, (from: 3)); // "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h"
@debug nths($-list, (from: length)); // h
@debug nths($-list, (from: start)); // "a", 1, "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h"

// single range (to: string/number)
@debug nths($-list, (to: 3)); // "a", 1, "b"
@debug nths($-list, (to: 3), (to: 3)); // "a", 1, "b", "a", 1, "b"

// single range (from: number/string, to: number/string)
@debug nths($-list, (from: length, to: start)); // "h", 7, "g", 6, "f", 5, "e", 4, "d", 3, "c", 2, "b", 1, "a"
@debug nths($-list, (from: start, to: start)); // "a"
@debug nths($-list, (from: -2, to: 3)); // 7, "h", "a", 1, "b"
@debug nths($-list, (to: -3, from: 3)); // "b", 1, "a", "h", 7, "g"
@debug nths($-list, (from: length, to: -3)); // "h", 7, "g", 6, "f", 5, "e", 4, "d", 3, "c", 2, "b", 1, "a", "h", 7, "g"

// multiple ranges (from?: number/string, to?: number/string)
@debug nths($-list, (from: 2, to: 4), (from: 3, to: 7)); // 1, "b", 2, "b", 2, "c", 3, "d"
@debug nths($-list, (from: 2)); // 1, "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h

// limit (offset, limit) (limit, )
@debug nths($-list, (5,)); // "a", 1, "b", 2, "c"
@debug nths($-list, (3, 5)); // "b", 2, "c", 3, "d"
@debug nths($-list, 3 5); // "b", 2, "c", 3, "d"
@debug nths($-list, (offset: 3)); // "a", 1, "b"  // Changes to limit.
@debug nths($-list, (limit: 3)); // "a", 1, "b"
@debug nths($-list, (offset: 1, limit: 3)); // "a", 1, "b"
@debug nths($-list, (offset: 3, limit: 5)); // "b", 2, "c", 3, "d"

// multiple limits (offset, limit) (limit, )
@debug nths($-list, (5, ), 2 3); // "a", 1, "b", 2, "c", 1, "b", 2
@debug nths($-list, 3 5, 2 3); // "b", 2, "c", 3, "d", 1, "b", 2
@debug nths($-list, (3, 5), (2, 3)); // "b", 2, "c", 3, "d", 1, "b", 2
@debug nths($-list, (offset: 1, limit: 3), (offset: 3, limit: 5)); // "a", 1, "b", "b", 2, "c", 3, "d"
@debug nths($-list, (limit: 3), (offset: 3, limit: 5)); // "a", 1, "b", "b", 2, "c", 3, "d"

// from: search
@debug nths($-list, (to: first '==' 'b')); // "a", 1, "b"
@debug nths(list.join($-list, ('a', 'c', 'd', 'b'), 'comma'), (to: last '==' 'b')); // "a", 1, "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h", "a", "c", "d", "b"
@debug nths($-list, -1 '...' (any '==' 'e')); // "h", "a", 1, "b", 2, "c", 3, "d", 4, "e"
@debug nths($-list, (from: any '==' 'b')); // "b", 2, "c", 3, "d", 4, "e", 5, "f", 6, "g", 7, "h"
@debug nths($-list, any '==' 'f', '...', length); // "f", 6, "g", 7, "h"
@debug nths(('a', 'b', 'c', 'd', 4, 'e', 'f'), (from: (any ':==' number) -1)); // "c", "d", 4, "e", "f"
@debug nths($-list, any '==' 'a', '...', 4); // "a", 1, "b", 2
@debug nths(('a', 'bold king purple', 'c', 'd', 'e', 'f'), any '~=' 'purple', '...', 4); // "bold king purple", "c", "d"
@debug nths(('a', 'b', 'bold king purple', 'c', 'd', 'e', 'f'), (any '~=' 'bold') -1, '...', 4); // "a", "b", "bold king purple", "c"
