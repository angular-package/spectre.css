// Sass.
// @use 'sass:list';

@use '../list';

// Functions,.
// @use '../../functions/list/get/list-get-list.function' as *;
@use 'var.css.function' as *;

// The function `unit()` returns CSS calc function with the given `$value` multiplied by CSS variable unit.
@function unit($name, $unit: false, $backup: null, $dictionary: ()) {
  $var: css($name, $backup, $dictionary);
  @if not $unit {
    $var-modifiers: list.get-list($name);
    $unit: list.index($var-modifiers, unit);
  }
  @if $unit {
    @return calc($var * css(unit if(type-of($unit) == string, $unit, rem), null, $dictionary));
  }
  @return $var;
}

// Examples.
// @debug unit(layout spacing); // var(--s-layout-spacing)

// unit default rem
// @debug unit(layout spacing, true); // calc(var(--s-layout-spacing) * var(--s-unit-rem))
// @debug unit(layout spacing, rem); // calc(var(--s-layout-spacing) * var(--s-unit-rem))
// @debug unit(layout spacing, px); // calc(var(--s-layout-spacing) * var(--s-unit-px))
// @debug unit(layout spacing (unit,)); // calc(var(--s-layout-spacing) * var(--s-unit-rem)) // REVIEW: Check.

// backup
// @debug unit(layout spacing, true, 250px); // calc(var(--s-layout-spacing) * var(--s-unit-rem))

// dictionary
// @debug unit(layout spacing, true, 250px, (layout: lay, spacing: spa)); // calc(var(--s-lay-spa) * var(--s-unit-rem))
