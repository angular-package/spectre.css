// Sass.
@use 'sass:map';

// Modules.
@use '../../list';

// Functions.
@use '../../functions/important.function' as *;
@use 'var.adjust.function' as *;
@use 'var.css.function' as *;
@use 'var.negative.function' as *;
@use 'var.unit.function' as *;

// Status: DONE
// The `get()` function.
@function get(
  $params,
  $adjust: null,
  $unit: false,
  $backup: null,
  $dictionary: ()
) {
  @if type-of($params) == list and list.length($params) == 0 {
    @return (); // REVIEW: consider changing the solution
  }
  @if $params == auto or type-of($params) == number {
    @return $params;
  }

  $modifiers: list.get-map($params);
  $important: if(list.index($params, any, '==', '!important'), true, false);
  $adjust: list.get-list($params) or map.get($modifiers, adjust) or $adjust;
  $backup: map.get($modifiers, backup) or $backup;
  $negative: not (list.index($params, any, '==', '!') == null) or map.get($modifiers, negative);
  $unit: list.get-bool($params) or map.get($modifiers, unit) or $unit;
  $params: list.remove-string($params, '!', '!important');
  @return negative(
    adjust(
      unit(
        css($params, $backup, map.get($modifiers, dictionary) or $dictionary),
        if($unit == true, 1rem, $unit),
      ),
      $adjust
    ),
    $negative
  ) + important($important);
}

// Examples.
// @debug get(layout spacing); // var(--s-layout-spacing)
// @debug get(layout spacing 1); // var(--s-layout-spacing-1)

// adjust by parameter
// @debug get(layout spacing, 1); // calc(var(--s-layout-spacing) + 1)
// @debug get(layout spacing, -51); // calc(var(--s-layout-spacing) + -51)
// @debug get(layout spacing, '+' 51); // calc(var(--s-layout-spacing) + 51)
// @debug get(layout spacing, '-' 51); // calc(var(--s-layout-spacing) - 51)
// @debug get(layout spacing, '*' 51); // calc(var(--s-layout-spacing) * 51)
// @debug get(layout spacing, '/' 51); // calc(var(--s-layout-spacing) / 51)

// with rem unit
// @debug get(layout spacing true); // calc(var(--s-layout-spacing) * var(--s-unit-rem))

// negative + unit + adjust + backup
// @debug get('!' layout spacing true ('+' 5), $backup: 250px); // calc(((var(--s-layout-spacing, 250px) * var(--s-unit-rem)) + 5) * -1)

// modifier in te $params
// adjust
// @debug get(layout spacing (-51,)); // calc(var(--s-layout-spacing) - 51)
// @debug get(layout spacing (51,)); // calc(var(--s-layout-spacing) + 51)
// @debug get(layout spacing ('+' 51)); // calc(var(--s-layout-spacing) + 51)
// @debug get(layout spacing ('-' 51)); // calc(var(--s-layout-spacing) - 51)
// @debug get(layout spacing ('*' 51)); // calc(var(--s-layout-spacing) * 51)
// @debug get(layout spacing ('/' 51)); // calc(var(--s-layout-spacing) / 51)
// @debug get(layout spacing (adjust: '-' 51)); // calc(var(--s-layout-spacing) -51)

// negative
// @debug get('!' layout spacing); // calc(var(--s-layout-spacing) * -1)
// @debug get(layout spacing (negative: true)); // calc(var(--s-layout-spacing) * -1)
// @debug get(layout spacing ('*' -1)); // calc(var(--s-layout-spacing) * -1)

// backup + dictionary
// @debug get(layout spacing (backup: 15rem, dictionary: (layout: lay,))); // var(--s-lay-spacing, 15rem)
