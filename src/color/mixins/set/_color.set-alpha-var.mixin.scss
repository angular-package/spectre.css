// Sass.
@use 'sass:color';
@use 'sass:meta';

// Modules.
@use '../../../math/math.calculate.function' as math;
@use '../../../var';

// Functions.
@use '../../functions/color.alpha-var.function' as *;
@use '../../functions/color.name.function' as *;

// Status: DONE
// The `set-alpha-var()` mixin.
@mixin set-alpha-var($name, $alpha: null, $adjust: null, $dictionary: ()) {
  @if (meta.type-of($alpha) == string and not var.is($alpha)) or meta.type-of($alpha) == list {
    $alpha: alpha-var($alpha, $adjust, null, $dictionary);
  } @else {
    $alpha: if(meta.type-of($alpha) == color, color.alpha($alpha), $alpha);
    $alpha: if(
      $adjust,
      math.calculate(
        $alpha,
        if(meta.type-of($adjust) == list, $adjust, '+' $adjust)...
      ),
      $alpha
    );
  }
  @include var.set(name($name, alpha), $alpha, $dictionary);
}

// Examples.
// :host {
  // from hex color
  // @include set-alpha-var(primary, 0.5); // --s-primary-color-a: 0.5;
  // @include set-alpha-var(primary, #5755d9); // --s-primary-color-a: 1;
  // @include set-alpha-var(primary, #5755d9f1); // --s-primary-color-a: 0.9450980392;

  // relative
  // @include set-alpha-var(primary, secondary dark); // --s-primary-color-a: var(--s-secondary-color-dark-a);
  // @include set-alpha-var(primary, var(--s-secondary-color)); // --s-primary-color-a: var(--s-secondary-color);

  // relative + backup
  // @include set-alpha-var(primary, secondary dark (backup: #5755d9)); // --s-primary-color-a: var(--s-secondary-color-dark-a);
  // @include set-alpha-var(primary, secondary dark, '*' 0.5); // --s-primary-color-a: calc(var(--s-secondary-color-dark-a) * 0.5);

  // relative + backup + dictionary
  // @include set-alpha-var(primary, secondary, 0.5, (secondary: three)); // --s-primary-color-a: calc(var(--s-three-color-a) + 0.5);
// }
