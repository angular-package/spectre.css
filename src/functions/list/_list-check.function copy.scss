// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../map/map-get-default.function' as *;
@use 'has/list-has-type.function' as *;
@use 'has/list-has-value.function' as *;
@use 'is/is-list.function' as *;
@use 'list-index-type.function' as *;
@use 'list-index.function' as *;
@use 'list-type-index.function' as *;

// Status: DONE
// The `list-check()` function.
@function list-check($list, $elements...) {
  $result: null;
  $condition: all; // all, any
  $method: equal; // equal, type-of
  $result-type: default;
  $result-types: (detailed, detailed-bool);
  $index: false; // Each found element in the list must be in the same index.
  $size: false; // List must be the same size. // TODO: Size.

  @if type-of($list) == map {
    $index: map-get-default($list, 'index', $index);
    $condition: map-get-default($list, 'condition', $condition);
    $result-type: map-get-default($list, 'result-type', $result-type);
    $method: map-get-default($list, 'method', $method);
    $list: map.get($list, 'list');
  }

  @if type-of($elements) == arglist and list.length($elements) > 0 {
    // all or any.
    // $result: if($condition == all, list-has-all($list, $index, $method, $elements...), list-has-any($list, $index, $method, $elements...));
    $result: if(
      $method == equal,
      list-has-value($list, $condition, $elements...),
      list-has-type($list, $condition, $elements...)
    );


    // @debug $result;

    // detailed.
    // @if list.index($result-types, $result-type) {
    //   $detailed: ();
    //   $i: 1;
    //   @each $element in $elements {
    //     $checked-exist: if(
    //       $method == equal,
    //       if($index == true, if(list.index($list, $element) == $i, $i, null), list-index($list, $element)),
    //       if($index == true, if(list-index-type($list, $i) == $element, $i, null), list-type-index($list, $element)) // type-of
    //     );
    //     $detailed: list.join($detailed, $checked-exist);
    //     $i: $i + 1;
    //   }

    //   $result: (result: $result, detailed: $detailed);
    // }
  }

  @return $result;
}

// `list-has-any()`
@function list-has-any($list, $index, $method, $elements...) {
  @if is-list($list, 0) and is-list($elements, 0) {
    @return -list-has($list, any, $index, $method, $elements...);
  }
  @return false;
}

// `list-has-all()`
@function list-has-all($list, $index, $method, $elements...) {
  @if is-list($list, 0) and is-list($elements, 0) {
    @return -list-has($list, all, $index, $method, $elements...);
  }
  @return false;
}

// The `-list-has()` function.
@function -list-has($list, $condition: any, $index: false, $method: equal, $elements...) {
  $result: if($condition == all, true, false);
  @if is-list($list, 0) and is-list($elements, 0) {
    $i: 1;
    @each $element in $elements {
      // Check whether the $element is equal or of type.
      $checked-exist: if(
        $method == equal,
        list.index($list, $element), // equal
        if($index == true, list-index-type($list, $i), list-has-type($list, $condition, $element)) // type-of
      );

      // Checked.
      $checked: if(
        $index == true,
        if(
          $condition == all,
          not ($checked-exist == if($method == equal, $i, $element)), // not index = index , not type-of = type-of
          $checked-exist == if($method == equal, $i, $element), // index = index , type-of = type-of
        ),
        if($condition == all, not $checked-exist, $checked-exist)
      );

      @if $checked {
        @return if($condition == all, false, true);
      }

      $i: $i + 1;
    }
  }
  @return $result;
}

// @debug list-check((list: ('a', 'b', 'c', true, 'a', false, null, 'a', 1, 2), method: equal, result-type: detailed, index: false), 2, 'a', 'b', null);
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), method: type-of, result-type: detailed, index: false), string);

// Examples.
// All
// @debug '      ';
// @debug '-- all';
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), 'b', 'a', 3, false, true, null, 1, 2); // false
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), false, true, null); // true
// @debug list-check(('a', 'b', 'c', true, false, null, 1, 2), false, true, null, 3); // false

// @debug '      ';
// @debug '-- all detailed';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), result-type: detailed), 'b', 'a', 3, false, true, null, 1, 2); // (result: false, detailed: 2 1 null 5 4 6 7 8)
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), result-type: detailed), false, true, null); // (result: true, detailed: 5 4 6)
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), result-type: detailed), false, true, null, 3); // (result: false, detailed: 5 4 6 null)


// Any
// @debug '      ';
// @debug '-- any';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any), 'b', 'a', 3, false, true, null, 1, 2); // true
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any), 'bb', 'aa', 33); // false
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any), 'c', 'bbb', 'bbbb', 33); // true
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any), 'b', 'a', 3, false, true, null, 1, 2); // true

// @debug '      ';
// @debug '-- any detailed';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, result-type: detailed), 'b', 'a', 3, false, true, null, 1, 2); // (result: true, detailed: 2 1 null 5 4 6 7 8)
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, result-type: detailed), 'bb', 'aa', 33); // (result: false, detailed: null null null)
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, result-type: detailed), 'c', 'bbb', 'bbbb', 33); // (result: true, detailed: 3 null null null)
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, result-type: detailed), 'b', 'a', 3, false, true, null, 1, 2); // (result: true, detailed: 2 1 null 5 4 6 7 8)

// Any strict index
// @debug '      ';
// @debug '-- any index';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, index: true), 'c', 'bbb', 'bbbb', 33); // false
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: any, index: true), 'a', 'bbb', 'c', 33); // true

// All strict index
// @debug '      ';
// @debug '-- all index';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: all, index: true), 'c', 'b', 'bbbb', 33); // false
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), condition: all, index: true), 'a', 'b', 'c', true); // true

// Detailed
// @debug '      ';
// @debug '--all detailed index';
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), result-type: detailed, index: true), 'a', 'b', 'c', 1, 2, 3, 5, 2); //
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 1, 2), result-type: detailed, index: true), 'b', 'a', 3, false, true, null, 1, 2); //
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 3, 4), result-type: detailed, index: true), 1, 'b', 3, 'blaaaaaa');
// @debug list-check((list: ('a', 'b', 'c', true, false, null, 3, 4), result-type: detailed, index: true), 'b', 1, 3, 'blaaaaaa');
