// Sass.
@use 'sass:list';

// Modules.
@use '../string';

// Status: DONE
// The `replace-string()` function.
@function replace-string($list, $replace, $replacement, $index...) {
  @if type-of($list) == list and list.length($list) > 0 {
    // Replaces only elements of the given `$index`.
    $i: 1;
    @if type-of($index) == arglist and list.length($index) > 0 {
      @each $element in $list {
        @if list.index($index, $i) {
          $list: -list-set-nth($list, $i, $element, $replace, $replacement);
        }

        $i: $i + 1;
      }

    // Otherwise replace all elements.
    } @else {
      @each $element in $list {
        $list: -list-set-nth($list, $i, $element, $replace, $replacement);
        $i: $i + 1;
      }
    }
  }
  @return $list;
}

// Private `-list-set-nth()` function.
@function -list-set-nth($list, $index, $element, $replace, $replacement) {
  @if type-of($element) == string {
    @return list.set-nth($list, $index, string.replace($element, first $replace $replacement));
  } @else if type-of($element) == list {
    @return list.set-nth($list, $index, -list-replace-string($element, $replace, $replacement));
  }
}

// Private `-list-replace-string()` function.
@function -list-replace-string($list, $replace, $replacement) {
  @if type-of($list) and list.length($list) > 0 {
    $i: 1;
    @each $element in $list {
      @if type-of($element) == string {
        $list: list.set-nth($list, $i, string.replace($element, first $replace $replacement));
      }

      $i: $i + 1;
    }
  }
  @return $list;
}

// Example usage
// @debug replace-string(('__PARENT__1123', 'aaaa__PARENT__1123', 'sdfsdfsd-dasdsad__PARENT__1123'), __PARENT__, '&');
