// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Modules.
@use '../../selector';

// Mixins.
@use 'var.set.mixin' as *;

// Functions.
// @use '../../functions/list/list-check.function' as *;
// @use '../../functions/selector-nest.function' as *;

// Mixins.
// @use 'var.set-vars.mixin' as *;
@use 'var.set.mixin' as *;

// Status:
// The `set-css-variables()` mixin.
@mixin set-from-map($css-vars, $keys: (), $selector: ((':root', ':host'),), $dictionary: ()) {
  $keys: if(meta.type-of($keys) == string, list.append((), $keys, list.separator($keys)), $keys);
  $check-keys: false;
  @if type-of($keys) == list and list.length($keys) > 0  {
    $check-keys: true;
  }

  @if type-of($css-vars) == map {
    #{selector.nest($selector)} {
      // Each key => not map.
      @each $key, $value in $css-vars {
        @if type-of($value) != map {
          $set: true;
          @if $check-keys == true {
            $set: list-check(list.nth($keys, 1), $key);
          }

          @if $set == true {
            @include set-var($key, $value, $dictionary);
          }
        }
      }
    }

    @each $key, $value in $css-vars {
      $set: true;
      @if $check-keys == true {
        $set: list-check(list.nth($keys, 1), $key);
      }

      @if type-of($value) == map and $set == true {
        #{selector.nest($selector)} {
          @each $-key, $-value in $value {
            $set: true;
            @if $check-keys == true and list.length($keys) == 2 {
              $set: list-check(list.nth($keys, 2), $-key);
            }

            @if $set == true {
              @if type-of($-value) == map {
                $do: false;

                // Check whether the values from the `$-value` map are of the map type.
                @each $val in map.values($-value) {
                  @if type-of($val) == map {
                    $do: true;
                  }
                }

                @if $do == true {
                  @each $--key, $--value in $-value {
                    $set: true;
                    @if $check-keys == true and list.length($keys) == 3 {
                      $set: list-check(list.nth($keys, 3), $--key);
                    }

                    @if $set == true {
                      @if type-of($--value) == map {
                        @include set-vars(($key, $-key, $--key), $--value, $dictionary);
                      } @else {
                        @include set-var(($key, $-key, $--key), $--value, $dictionary);
                      }
                    }
                  }
                } @else {
                  @include set-vars(($key, $-key), $-value, $dictionary);
                }
              } @else {
                @include set-var(($key, $-key), $-value, $dictionary);
              }
            }
          }
        }
      }
    }
  }
}
