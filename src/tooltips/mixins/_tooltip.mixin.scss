// Variables.
@use '../../variables/core' as *;

// Functions.
@use '../../functions/color/scheme/is-scheme-dark.function' as *;
@use '../../functions/color/scheme/is-scheme-light.function' as *;
@use '../../functions/color/scheme/is-scheme-normal.function' as *;
@use '../../functions/var/get-var.function' as *;
@use '../../functions/var/unit-var.function' as *;
@use '../../functions/var/var-negative.function' as *;
@use '../functions/tooltip-class.function' as *;

// Mixins.
@use '../../borders/mixins/radius/border-radius.mixin' as *;
@use '../../mixins/color/background.mixin' as *;
@use '../../mixins/color/color.mixin' as *;
@use '../../mixins/disabled.mixin' as *;
@use '../../mixins/font-size.mixin' as *;
@use '../../mixins/padding.mixins' as *;
@use '../../mixins/transition.mixin' as *;
@use '../../mixins/z-index.mixin' as *;

// The `tooltip()` mixin.
@mixin tooltip($class: '', $selector: (), $dictionary: ()) {
  #{tooltip-class($class, $selector, $dictionary)} {
    @include disabled('.');

    &::after {
      // Position.
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      @include z-index('3');

      // Display.
      // display: block;
      display: none;
      overflow: hidden;

      // max-width: get-var('control-width', $suffix: 'sm');
      max-width: get-var(('control', 'width', 'sm'));
      @include padding(('unit', '1'), ('unit', '2'));

      // border-radius: get-var('border-radius');
      @include border-radius;
      @include color((
        'background': ('dark', (alpha: 0.95)),
        'color': 'light'
      ));

      // REVIEW: Can be used for different color themes.
      // @include color((
      //   'background': (
      //     dark: ('dark', (alpha: 0.95)),
      //     light: ('dark', (alpha: 0.95)),
      //     normal: ('dark', (alpha: 0.95)),
      //   ),
      //   'color': (
      //     'dark': 'light',
      //     'light': 'light',
      //     'normal': 'light'
      //   )
      // ));

      // font-size: get-var('font-size', $suffix: 'sm');
      // font-size: get-var(('font', 'size', 'sm'));
      @include font-size('sm');

      text-overflow: ellipsis;
      white-space: pre;
      opacity: 0;
      pointer-events: none;

      // @include transition(opacity, transform);
      transform: translate(-50%, unit-var('2'));
      animation: fade-effect 0.5s;
    }

    &:focus,
    &:hover {
      position: relative;

      &::after {
        display: block;
        opacity: 1;
        transform: translate(-50%, var-negative(unit-var('1')));
      }
    }

    // Directions.
    // &.tooltip-right {
    // #{class(('&', $tooltip-name, 'right'))} {
    #{tooltip-class(('&', $class, 'right'), (), $dictionary)} {
      &::after {
        bottom: 50%;
        left: 100%;
        transform: translate(var-negative(unit-var('1')), 50%);
      }

      &:focus,
      &:hover {
        &::after {
          transform: translate(unit-var('1'), 50%);
        }
      }
    }

    // &.tooltip-bottom {
    // #{class(('&', $tooltip-name, 'bottom'))} {
    #{tooltip-class(('&', $class, 'bottom'), (), $dictionary)} {
      &::after {
        top: 100%;
        bottom: auto;
        transform: translate(-50%, var-negative(unit-var('2')));
      }

      &:focus,
      &:hover {
        &::after {
          transform: translate(-50%, unit-var('1'));
        }
      }
    }

    // &.tooltip-left {
    // #{class(('&', $tooltip-name, 'left'))} {
    #{tooltip-class(('&', $class, 'left'), (), $dictionary)} {
      &::after {
        right: 100%;
        bottom: 50%;
        left: auto;
        transform: translate(unit-var('2'), 50%);
      }

      &:focus,
      &:hover {
        &::after {
          transform: translate(var-negative(unit-var('1')), 50%);
        }
      }
    }
  }
}
