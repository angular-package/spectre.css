// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../../map/map-get-default.function' as *;
@use '../../map/values-map.function' as *;
@use '../has/list-has-string.function' as *;
@use '../index-condition.function' as *;
@use '../index/list-index.function' as *;
@use '../is/is-list-length.function' as *;
@use '../is/is-list.function' as *;
@use 'list-nth-default.function' as *;
@use 'list-range-nth.function' as *;

// Status: DONE
// The `list-nth()` function.
@function list-nth($list, $index, $default: null) {
  $result: ();
  $get: index-condition($index, 'get');
  $operand: index-condition($index, 'operand');

  @if $get {
    @debug $get;
    @debug $operand;
    // @debug list-index((number, string, null, bool), any, $operand);

    @return list-nth-default($list, $index, $default);
  }

  // Get single index.
  @else if type-of($index) == number {
    @return list-nth-default($list, $index, $default);

  // Get indexes in a specified range.
  } @else if list-has-string($index, any, '...') or type-of($index) == map {
    @return list-nth-range($list, pick-range($index, 'from'), pick-range($index, 'to'), $default);

  // Get indexes.
  } @else if is-list-length($index) {
    @each $i in $index {
      $result: list.append($result, list-nth-default($list, $i, $default), $separator: list.separator($list));
    }
  }
  @return $result;
}

// The `pick-range()` function.
@function pick-range($value, $point) {
  @if is-list($value) {
    $value: values-map($value, 'from', 'range', 'to');
  }
  @return map-get-default($value, $point, if($point == 'from', 0, length));
}
