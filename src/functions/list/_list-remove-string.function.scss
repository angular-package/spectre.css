// Sass.
@use 'sass:list';

// Functions.
@use 'list-remove-nth.function' as *;

// The `list-remove-string()` function returns the list with removed elements of string type,
// or elements of string type equal to the given arbitrary `$string` argument.
@function list-remove-string($list, $string...) {
  $-list: ();
  @if list.length($string) > 0 {
    $-remove: ();
    @each $s in $string {
      $-remove: list.append($-remove, list.index($list, $s), $separator: list.separator($list));
    }
    $-list: list-remove-nth($list, $-remove...);
  } @else {
    @each $element in $list {
      @if type-of($value: $element) != string {
        $-list: list.append($-list, $element, $separator: list.separator($list));
      }
    }
  }
  @return $-list;
}

/*
  Example usage
  @debug list-remove-string(('a', 'b', 'c')); // Returns `()`
  @debug list-remove-string(('a', 'b', 'c', ('d', 'e', 'f'))); // Returns (("d", "e", "f"),)
  @debug list-remove-string(('a', 'b', 'c', ('d', 'e', 'f'), 'g', 'h', (1, 2, 3))); // Returns ("d", "e", "f"), (1, 2, 3)
  @debug list-remove-string(('a', 'b', 'c', ('d', 'e', 'f'), 'g', 'h', (1, 2, 3)), 'b', 'h'); // Returns ("a", "c", ("d", "e", "f"), "g", (1, 2, 3))
  @debug list-remove-string(('a', 'b', 'c', ('d', (1, 2, 3, (4, 5, 6)), 'e', 'f'))); // Returns (("d", (1, 2, 3, (4, 5, 6)), "e", "f"),)
*/
