// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Modules.
@use '../../list/get/list.get-map.function' as *;
@use '../../list/get/list.get-list.function' as *;
@use '../../list/has/value/list.has-values.function' as *;
@use '../../list/remove/list.remove-string.function' as *;
@use '../../string';

// Functions.
@use '../../var/functions/var.get.function' as var;
@use '../functions/color.name.function' as *;
@use 'color.hsla-color.function' as *;

// Status: DONE
// The function `color()` returns the `hsla()` color from a CSS variables of the given `$name`.
@function color(
  $name,
  $hue: null,
  $saturation: null,
  $lightness: null,
  $alpha: null,
  $backup: null,
  $dictionary: ()
) {
  @if not (type-of($name) == map) {
    $name: if(
      $hue or $saturation or $lightness or $alpha or
      has-values($name, any, true, any '==' [hsla], any '~=' ':hsla') or
      has-values($name, any, true, any ':==' number) or
      has-values(map.values(get-map($name)), any, true, any ':==' number) or
      has-values(get-list($name, all), any, true, any ':==' number),
      ($name: hsla),
      $name
    );
  }
  @each $name, $type in if(type-of($name) == map, $name, ($name: var)) {
    $name: if(
      meta.type-of($name) == string,
      string.replace($name, first ':hsla' ''),
      remove-string($name, ':hsla')
    );
    @if $name == currentcolor or type-of($name) == color {
      @return $name;
    }
    @if $type == hsla {
      @return hsla-color($name, $hue, $saturation, $lightness, $alpha, $dictionary);
    } @else if $type == var {
      @return var.get(name($name), null, null, $backup, $dictionary);
    }
  }
}

// Examples.
// string or list
// @debug color(dark); // var(--s-dark-color)
// @debug color(dark color); // var(--s-dark-color)
// @debug color(light); // var(--s-light-color)
// @debug color(light color); // var(--s-light-color)
// @debug color(primary); // var(--s-primary-color)
// @debug color(primary dark); // var(--s-primary-color-dark)
// @debug color('gray'); // var(--s-gray-color)
// @debug color(gray dark); // var(--s-gray-color-dark)

// hsla form
// @debug color('dark:hsla'); // hsla(var(--s-dark-color-h), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color((primary dark) ':hsla'); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), var(--s-primary-color-dark-l), var(--s-primary-color-dark-a))
// @debug color((primary dark) [hsla]); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), var(--s-primary-color-dark-l), var(--s-primary-color-dark-a))

// map (color name:hsla)
// @debug color((primary dark: hsla)); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), var(--s-primary-color-dark-l), var(--s-primary-color-dark-a))
// @debug color((dark: hsla)); // hsla(var(--s-dark-color-h), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color((primary: hsla)); // hsla(var(--s-primary-color-h), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a))
// @debug color(((primary dark,): hsla)); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), var(--s-primary-color-dark-l), var(--s-primary-color-dark-a))

// adjust deg
// @debug color(dark, 10deg); // hsla(calc(var(--s-dark-color-h) + 10deg), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(dark, -10deg); // hsla(calc(var(--s-dark-color-h) - 10deg), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(primary dark, '*' 0.5deg); // hsla(calc(var(--s-primary-color-h) * 0.5deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a))

// adjust in list in order lightness + alpha
// @debug color((primary dark) 15%); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), var(--s-primary-color-dark-a))
// @debug color(((primary dark) 15%: hsla)); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), var(--s-primary-color-dark-a))
// @debug color((primary dark) 15% 0.5); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.5))

// adjust in list in order hue + saturation + lightness + alpha
// @debug color((primary dark) 15deg 5% 15% 0.1); // hsla(calc(var(--s-primary-color-dark-h) + 15deg), calc(var(--s-primary-color-dark-s) + 5%), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.1))
// @debug color(((primary dark) 15deg 5% 15% 0.1: hsla)); // hsla(calc(var(--s-primary-color-dark-h) + 15deg), calc(var(--s-primary-color-dark-s) + 5%), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.1))
// @debug color(((primary dark) ('*' 5deg) ('/' 5%) ('*' 15%) ('*' 0.2): hsla)); // hsla(calc(var(--s-primary-color-dark-h) * 5deg), calc(var(--s-primary-color-dark-s) / 5%), calc(var(--s-primary-color-dark-l) * 15%), calc(var(--s-primary-color-dark-a) * 0.2))
// @debug color((primary dark) ('*' 5deg) ('/' 5%) ('*' 15%) ('*' 0.2)); // hsla(calc(var(--s-primary-color-dark-h) * 5deg), calc(var(--s-primary-color-dark-s) / 5%), calc(var(--s-primary-color-dark-l) * 15%), calc(var(--s-primary-color-dark-a) * 0.2))

// adjust saturation
// @debug color((dark,) (saturation: 30%)); // hsla(var(--s-dark-color-h), calc(var(--s-dark-color-s) + 30%), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color((dark,) (saturation: -30%)); // hsla(var(--s-dark-color-h), calc(var(--s-dark-color-s) - 30%), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color((dark,) (saturation: 30%, hue: 5deg)); // hsla(calc(var(--s-dark-color-h) + 5deg), calc(var(--s-dark-color-s) + 30%), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color((secondary light) (saturation: '*' 10%, hue: 5deg)); // hsla(calc(var(--s-secondary-color-light-h) + 5deg), calc(var(--s-secondary-color-light-s) * 10%), var(--s-secondary-color-light-l), var(--s-secondary-color-light-a))

// dictionary
// @debug color('accent:hsla', $dictionary: (accent: a)); // hsla(var(--s-a-color-h), var(--s-a-color-s), var(--s-a-color-l), var(--s-a-color-a))
