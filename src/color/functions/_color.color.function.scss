// Sass.
@use 'sass:list';

// Modules.
@use '../../var';

// Functions.
@use '../functions/color.name.function' as *;
@use 'color.hsla-color.function' as *;

// Status: DONE
// The function `color()` returns the `hsla()` color from a CSS variables of the given `$name`.
@function color(
  $name,
  $hue: null,
  $saturation: null,
  $lightness: null,
  $alpha: null,
  $backup: null,
  $dictionary: ()
) {
  $name: if(list.index($name, ':hsla'), ($name: hsla), $name);
  @each $name, $type in if(type-of($name) == map, $name, ($name: var)) {
    @if $name == currentcolor or type-of($name) == color {
      @return $name;
    }
    @if $type == hsla {
      @return hsla-color($name, $hue, $saturation, $lightness, $alpha, $dictionary);
    } @else if $type == var {
      @return var.get(name($name), null, null, $backup, $dictionary);
    }
  }
}

// Examples.
// @debug color((dark: hsla)); // hsla(var(--s-dark-color-h), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(dark); // hsla(var(--s-dark-color-h), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(light); // hsla(var(--s-light-color-h), var(--s-light-color-s), var(--s-light-color-l), var(--s-light-color-a))<<
// @debug color(((primary dark) 15%: hsla)); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), var(--s-primary-color-dark-a))
// @debug color((primary dark) 15%); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), var(--s-primary-color-dark-a))
// @debug color('gray'); // hsla(var(--s-gray-color-h), var(--s-gray-color-s), var(--s-gray-color-l), var(--s-gray-color-a))
// @debug color(gray); // gray

// adjust deg
// @debug color(dark, 10deg); // hsla(calc(var(--s-dark-color-h) + 10deg), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(dark, -10deg); // hsla(calc(var(--s-dark-color-h) - 10deg), var(--s-dark-color-s), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(primary dark, '*' 0.5deg); // hsla(calc(var(--s-primary-color-h) * 0.5deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a))

// adjust saturation
// @debug color(dark (saturation: 30%)); // hsla(var(--s-dark-color-h), calc(var(--s-dark-color-s) + 30%), var(--s-dark-color-l), var(--s-dark-color-a))
// @debug color(dark (saturation: -30%)); // hsla(var(--s-dark-color-h), calc(var(--s-dark-color-s) - 30%), var(--s-dark-color-l), var(--s-dark-color-a))

// dictionary
// @debug color(accent, $dictionary: (accent: a)); // hsla(var(--s-a-color-h), var(--s-a-color-s), var(--s-a-color-l), var(--s-a-color-a))
