// Modules.
@use '../list';
@use '../string';

// Status: DONE
// The `replace-parent-placeholder()` function.
@function replace-parent-placeholder($selector, $placeholder: __PARENT__) {
  @if type-of($selector) == list and list.length($selector) > 0 {
    @if list.type-index($selector, 1) == string {
      $selector: list.replace-string($selector, $placeholder, '&');
    } @else {
      $i: 1;
      @each $value in $selector {
        @if type-of($value) == list and list.length($value) > 0 {
          $selector: list.set-nth($selector, $i, list.replace-string($value, $placeholder, '&'));
        }

        $i: $i + 1;
      }
    }
  } @else if type-of($selector) == string {
    $selector: string.replace($selector, all $placeholder '&');
  }
  @return $selector;
}

// Examples.
// string
// @debug replace-parent-placeholder('__PARENT__card'); // "&card"
// @debug replace-parent-placeholder('__PARENT__card__PARENT__'); // "&card&"

// list
// @debug replace-parent-placeholder(('__PARENT__', 'card')); // "&", "card"
// @debug replace-parent-placeholder(('__PARENT__', 'card', '__PARENT__')); // "&", "card", "&"

// list in list
// @debug replace-parent-placeholder((('__PARENT__', 'bla'), 'card')); // ("&", "bla"), "card"
// @debug replace-parent-placeholder(('__PARENT__' 'bla', __PARENT__ 'card')); // ("&", "bla"), (&, "card")
// @debug replace-parent-placeholder(('__PARENT__' 'first', __PARENT__ + 'second') (__PARENT__ third)); // ("&" "first", &second) (& third)

// not replaced
// @debug replace-parent-placeholder(('__PARENT__', 'card'), __OTHER__); // "__PARENT__", "card"

// different placeholder
// @debug replace-parent-placeholder(('__OTHER__', 'card'), __OTHER__); // "&", "card"
