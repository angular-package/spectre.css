// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../compare.function' as *;
@use '../values';
@use 'nth' as *;

// Status: TODO: Check `has`.
// The `query()` function.
@function query($query...) {
  $result: ();
  $query: values.map(
    $query,
    (select: has index nth quantity type),
    (from: list),
    (occurrence: any all first last),
    (operand: index nth type),
    (operator: string),
    (operands: list),
    (range: list, limit: number list),
  );

  @each $operand in map.get($query, operands) {
    $query-result: -execute-query($query, $operand);

    // Add query result to result.
    $result: list.append(
      $result,
      if(list.length($query-result) > 0, $query-result, null),
      list.separator(map.get($query, 'from')
    ));
  }

  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Private helper `-execute-query()` function.
@function -execute-query($query, $operand) {
  // Get result.
  $result: -execute-operation($query, $operand);

  // Do operations on `$result`.
  @if type-of($result) == list and list.length($result) > 0 {
    $length: list.length($result);

    // Pick range from the result.
    @if map.get($query, range) {
      @if list.index(map.get($query, range), '...') or not map.get($query, limit) {
        $from: list.nth(map.get($query, 'range'), 1);
        $to: list.nth(map.get($query, 'range'), if(list.length(map.get($query, range)) == 3, 3, 2));
        $result: nth-range($result, $from if($to > $length, if($from > $length, $from, $length), $to)...);
      }
    }

    // Limit the result.
    @if map.get($query, limit) {
      @if not list.index(map.get($query, limit), '...') or not map.get($query, range) {
        $limit: list.nth(map.get($query, limit), if(list.length(map.get($query, limit)) > 1, 2, 1));
        $offset: if(list.length(map.get($query, limit)) > 1, list.nth(map.get($query, limit), 1), 1);
        @if $offset < $length {
          $limit: if($limit > $length, ($length - $offset) + 1, $limit);
        } @else {
          $limit: 1;
        }

        $result: nth-limit($result, $offset $limit...);
      }
    }
  }

  // Select quantity.
  @if map.get($query, select) == quantity {
    $result: list.length($result);
  }

  // Return the result.
  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Private helper `execute-operation()` function.
@function -execute-operation($query, $operand) {
  $result: ();
  $i: 1;

  // Each list element.
  @each $value in map.get($query, from) {
    // What select from the list.
    $selected: null;
    @if map.get($query, select) == index {
      $selected: $i;

    } @else if map.get($query, select) == nth {
      $selected: $value;

    } @else if map.get($query, select) == type {
      $selected: meta.type-of($value);

    }

    // Left operand.
    $value: if(map.get($query, 'operand') == index, $i, if(map.get($query, 'operand') == type, meta.type-of($value), $value));

    // Compare value with the operand.
    $operation-result: compare($value, map.get($query, where, operator) or map.get($query, operator), $operand);

    // Add to result whether the `$operation-result` is true.
    $result: if(
      $operation-result,
      list.append($result, $selected, list.separator(map.get($query, from))),
      $result
    );

    // If occurrence is set to any return the `$result`.
    @if map.get($query, occurrence) == any and $operation-result {
      @return $result;
    }

    $i: $i + 1;
  }
  @return $result;
}

// Examples.
$-from: (227, 'a', 2, (key-1: value-1, key-2: value-2), 69, 220, 115, (226, 3), 4, 4, 4, 4, 'a', 'b', 3, 'c', 4, 'd', 5, 'e', 6, 450, 'f', 7, 'g');

// query.
// $-query: (select: index) (from: $-from) (occurrence: all) (operand: nth) (operator: '==') (operands: (4, (226, 3), 'a', 'bb'));
// @debug query($-query...); // (8, 9, 10, 11, 16), 7, (2, 12), null

// select: nth where: all/any index operand {operator} value/(value)
// @debug query((nth, $-from, any, index, '==', (4, 5, 10, 12))...); // (key-1: value-1, key-2: value-2), 69, 4, 4
// @debug query((nth, $-from, any, index, '>', (4, 5, 10, 12))...); // 69, 220, 4, "a"
// @debug query((nth, $-from, any, index, '<', (4, 5, 10, 12))...); // 227, 227, 227, 227


// select: index where all/any nth operand {operator} value/(value)
// @debug query(index $-from all nth '==' (4 (226, 3) 'a' 'bb')...); // (9, 10, 11, 12, 17), 8, (2, 13), null
// @debug query((index, $-from, all, nth, '==', ('a', 4))...); // (2, 13), (9, 10, 11, 12, 17)
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'))...); // 9, 8, 2, null
// @debug query((index, $-from, any, nth, '(,)==', (1, 2, 3))...); // null, 8, null
// @debug query((index, $-from, all, nth, '(:)==', (2,),)...); // 4
// -- limit
// @debug query((index, $-from, any, nth, '==', ('a',), (limit: 5))...); // 2
// @debug query((index, $-from, all, nth, '==', ('a', 4), (limit: 5))...); // (2, 13), (9, 10, 11, 12, 17)
// @debug query((index, $-from, all, nth, '==', ('a', 4), (limit: 3 7))...); // 13, (10, 11, 12, 17)
// @debug query((index, $-from, all, nth, '==', (4, (226, 3), 'a', 'bb'), 2)...); // (9, 10), 8, (2, 13), null
// @debug query((index, $-from, all, nth, '==', (4, (226, 3), 'a', 'bb'), 2 3)...); // (10, 11, 12), null, 13, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (limit: 5))...); // 9, 8, 2, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (offset: 1, limit: 5))...); // 9, 8, 2, null
// -- range
// @debug query((index, $-from, all, nth, '==', (4, (226, 3), 'a', 'bb'), 2 '...' 3)...); // (10, 11), null, 13, null
// @debug query((index, $-from, all, nth, '==', (4, (226, 3), 'a', 'bb'), (range: 2 5))...); // (10, 11, 12, 17), null, 13, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (2, '...', 5))...); // null, null, null, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (1, '...', 5))...); // 9, 8, 2, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (to: 5))...); // 9, 8, 2, null
// @debug query((index, $-from, any, nth, '==', (4, (226, 3), 'a', 'bb'), (from: 1, to: 5))...); // 9, 8, 2, null


// select: quantity where: all/any index {operator} value/(value)
// @debug query((quantity, $-from, all, nth, '==', (4, (226, 3), 'a', 'bb'))...); // 5, 1, 2, 0
// @debug query((quantity, $-from, all, nth, ':==', (list, number, string))...); // 1, 15, 8


// select: type where all/any index {operator} value/(value)
// @debug query((type, $-from, all, index, '==', (1, 8, 225),)...); // number, list, null
// @debug query((type, (1, 1, 1, 'a', 2, 2, 2, 1,), all, nth, ':==', (number, string))...);
// -- range
// @debug query((type, $-from, all, index, '==', (1, 63, 225), (1 '...' 3))...); // number, null, null


// select: nth where all/any nth {operator} value/(value)
// @debug query((nth, list.join($-from, 'bold king'), any, nth, '~=', (bold, king))...); // "bold king", "bold king"
// @debug query((nth, list.join($-from, 'king one'  'bold king'), all, nth, '~=', (bold, king))...); // "bold king", ("king one", "bold king")


// select nth of all given nth of the type
// @debug query((nth, $-from, all, nth, ':==', number string)...); // (227, 2, 69, 220, 115, 4, 4, 4, 4, 3, 4, 5, 6, 450, 7), ("a", "a", "b", "c", "d", "e", "f", "g")
