// Sass.
@use 'sass:map';

// Variables.
@use '../../variables/core' as *;
@use '../variables/bar.var' as *;

// Functions.
@use '../../module/module.class.function' as *;

// @use '../../borders/functions/border-size-var.function' as *; // TODO: borders

// Modules.
@use '../../color';
@use '../../var';

// Mixins.
@use '../../borders/mixins/borders.radius.mixins' as border;
@use '../../mixins/font-size.mixin' as *;

// Status:
// The `bar()` mixin.
@mixin bar(
  $class: (),
  $pseudo-class: (),
  $size: map.get($bar, size),
  $dictionary: ()
) {
  // Bars
  #{class(bar, $class, $pseudo-class, $dictionary)} {
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    height: var.unit-var(4);

    // border-radius: get-var('border-radius');
    @include border.radius;
    @include color.background(bg dark);

    @if type-of($size) == map {
      @each $size, $value in $size {
        #{class(bar, '&' $class $size, (), $dictionary)} {
          height: var.unit-var($value);
        }
      }
    }

    // TODO: attr() support
    #{class(bar, $class item, (), $dictionary)} {
      position: relative;
      display: block;
      flex-shrink: 0;
      width: 0;
      height: 100%;
      @include color.background(primary);
      @include color.color(light);
      @include font-size(sm);

      line-height: var.unit-var(4);
      text-align: center;

      &:first-child {
        // border-bottom-left-radius: get-var('border-radius');
        // border-top-left-radius: get-var('border-radius');
        @include border.radius((bottom-left, top-left));
      }

      &:last-child {
        flex-shrink: 1;

        // border-bottom-right-radius: get-var('border-radius');
        // border-top-right-radius: get-var('border-radius');
        @include border.radius((bottom-right, top-right));
      }
    }
  }
}
