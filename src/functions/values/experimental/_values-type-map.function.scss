// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../../../functions/variable.function' as *;
@use '../../list/nth/list-nth-default.function' as *;
@use '../../map/map-get-default.function' as *;
@use '../../map/map-set.function' as *;
@use '../../string';

// Status: REVIEW: Function name
// The `values-type-map()` function returns map built from the given `$list` under the given `$keys`.
@function values-type-map($values, $key-type...) {
  $map: ();
  @if (type-of($values) == list or type-of($values) == map) and list.length($key-type) > 0 {
    @if type-of($values) == list {
      $i: 1;
      @each $value in $values {
        // Optional key indicated by the ','.
        @each $name, $type in list-nth-default($key-type, $i) {
          @if $name {
            @if type-of($name) == string and string.index($name, ',') and not list-nth-default($values, $i + 1) {
              $i: $i + 1;
            }
          }
        }

        @each $name, $type in list-nth-default($key-type, $i) {
          @if type-of($name) == string {
            $name: string.replace($name, first ',' '');
            $map: -map-set($map, $name, map-get-default($value, $name, $value), -type($type));
          }
        }

        $i: $i + 1;
      }
    } @else if type-of($values) == map {
      @each $key in $key-type {
        @each $name, $type in $key {
          $map: -map-set($map, $name, map-get-default($values, $name), -type($type));
        }
      }
    }
  }
  @return $map;
}

// The `-map-set()` function.
@function -map-set($map, $key, $value, $type) {
  @if $key {
    @return if($type, map-set($map, $key, $value, $type...), map-set($map, $key, $value));
  } @else {
    @return $map;
  }
}

@function -type($value) {
  @if type-of($value) == string and string.index($value, variable(query, indicator, type)) {
    $value: variable(query, string.replace($value, first variable(query, indicator, type) '')) or $value;
  }
  @return $value;
}

// Examples.
// @debug values-type-map((5, '==', (63, 21, 234)), (operand: number), operator, (operands: ()));
// @debug values-type-map((nth, '>', (63, 21, 234)), (operand: string), (operator: ('==', '>', '!=')), (operands: list));
// @debug values-type-map((operand: nth, operator: '==', operands: (63, 21, 234)), (operand: string), (operator: '=='), (operands: (list, number)));
// @debug values-map-get(
//   ((select: nth), (from: (1, 2, 3)), (where: (nth, '==', (63, 21, 234))), ),
//   ((select: string), (from: list), (where: ((operand: string), (operator: string), (operands: list))))
// );

// Key.
// ? - Char indicates that if key does not exist in the map then return null value, not the map by default.
