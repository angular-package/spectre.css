// Functions.
@use 'list.has-value.function' as *;

// Status: DONE
// The `has-all-values()` function.
// ! $occurrence: all - not changeable
// ? $operator: '==', '!=', '~=', '!~=', ':==', ':!=', '>', '>=', '<', '<=',
// ?            '(:)', '(:)==', '(:)!=', '(:)>', '(:)>=', '(:)<', '(:)<=',
// ?            '(,)', '(,)==', '(,)!=', '(,)>', '(,)>=', '(,)<', '(,)<='
@function has-all-values($list, $operator: '==', $values...) {
  $has: true;
  @each $value in $values {
    $has: has-value($list, any, $operator, $value);
    @if not $has {
      @return false;
    }
  }
  @return $has;
}

// Examples.
// ---
// equality operator == !=
// ---
// @debug has-all-values(('a', 'a', 'a'), '==', 'a'); // true
// @debug has-all-values((true, true, true), '==', true); // true
// @debug has-all-values((false, false, false), '==', false); // true
// @debug has-all-values((null, null, null), '==', null); // true
// @debug has-all-values((('a': 1), ('a': 1), ('a': 1)), '==', ('a': 1)); // true
// @debug has-all-values(('a', 'b', 'c'), '==', 'c', 'b', 'a'); // true
// @debug has-all-values(('a', 1, 'b', 'c', false), '==', 1, false); // true
// @debug has-all-values(('a', ('b', 'c'), null), '==', ('b', 'c'), null); // true
// @debug has-all-values(('a', ('b', 'c'), 4, null), '==', 4, null, 'a', ('b', 'c')); // true

// @debug '--';
// @debug has-all-values(('a', 'b', 1, 'c'), '==', 'c'); // true
// @debug has-all-values(('a', 'b', 'c'), '==', 1, 4); // false
// @debug has-all-values(('a', false, 'b', 'c', null, 5), '==', null, 5, 'a', true); // false
// @debug has-all-values(('a', ('b', 'c'), null, false), '==', ('b', 'c'), true, 'a'); // false
// @debug has-all-values((('a', 1), '==', ('b', 'c'), (null, false)), '==', '==', (null, false)); // true



// ---
// number relational operator >= > < <=
// ---
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '>', 23, 26); // true
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '>', 23, 27); // false
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '>=', 27); // true
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '<', 24, 27); // true
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '<=', 23); // true
// @debug has-all-values((23, 25, 26, 'c', 27, (27: 1), (22, 33)), '<', 23); // false



// ---
// string index operator ~= and !~=
// ---
// $-list: ('bold king', 'blizzard the company', 23, 'c', 25, 26, 'd', 'e', 27, (27: 1), (22, 33));
// @debug has-all-values($-list, '~=', 'bold', 'the', 'company'); // true
// @debug has-all-values($-list, '~=', 'bold', 'the1', 'company'); // false
// @debug has-all-values($-list, '!~=', 'bold', 'the1', 'company'); // true
// @debug has-all-values(('bold the company', 'the bold company'), '!~=', 'bold', 'the', 'company'); // false



// ---
// type-of operator :== and :!=
// ---
// $-list: ('a', 1, (2: b), (3, c), null, true, false);
// @debug has-all-values($-list, ':==', string, number, list, map, null, bool); // true
// @debug has-all-values($-list, ':!=', string, number, list, map, null, bool); // true
// @debug has-all-values(false false false true, ':!=', bool); // false
// @debug has-all-values(false false false true, ':==', bool); // true
// @debug has-all-values(null null null null, ':==', null); // true



// -----------
// list length operator (,)== (,)!= (,)> (,)>= (,)< (,)<=
// -----------
// @debug has-all-values((('a', 1), ('b', 'c'), (null, false)), '(,)==', 2); // true
// @debug has-all-values((('a', 1), ('b', 'c'), (null, false)), '(,)>', 2); // false
// @debug has-all-values((('a', 1), ('b', 'c'), (null, false)), '(,)<', 2); // false
// @debug has-all-values((('a', 1), ('b', 'c'), (null, false)), '(,)>=', 2); // true
// @debug has-all-values((('a', 1), ('b', 'c'), (null, false)), '(,)<=', 2); // true



// ---
// map length operator (:)== (:)!= (:)> (:)>= (:)< (:)<=
// ---
// $-list: (('a':(1:(2: (3: 4)))), ('b': 'c', d: f, g: h), (null, false));
// @debug has-all-values($-list, '(:)==', 3); // true
// @debug has-all-values($-list, '(:)==', 2); // false
// @debug has-all-values($-list, '(:)>', 3); // false
// @debug has-all-values($-list, '(:)>', 2); // true
// @debug has-all-values($-list, '(:)>=', 3); // true
// @debug has-all-values($-list, '(:)<', 3); // true
// @debug has-all-values($-list, '(:)<', 1); // false
// @debug has-all-values($-list, '(:)<=', 1); // true
