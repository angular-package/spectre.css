// Sass.
@use 'sass:meta';

// Variables.
@use '../../variables/sides.var' as variables;

// Functions.
@use '../../list';
@use '../../selector';
@use '../../string';
@use '../../var';

// Status: DONE
// Side variant mixin.
@mixin side-variant(
  $property,
  $variant,
  $side: (),
  $dictionary: ()
) {
  $-sides: $side;
  $-variant: $variant;
  $-property: if(list.separator($property) == comma and not (meta.type-of($property) == map), list.append((), $property, space), $property);
  @for $i from 1 through list.length($-property) {
    $property: list.nth($-property, $i);
    @each $property, $side, $variant in if(type-of($property) == map, $property, ($property,)) {
      @if type-of($side) == map {
        @each $get-side, $get-variant in $side {
          $side: $get-side;
          $variant: $get-variant;
        }
      }
      @each $name in $property {
        @each $side in $side or $-sides {
          @each $variant, $size in $variant or $-variant {
            $class: list.join((), if($side == '', $name $variant, $name $side $variant));
            @debug $class;
            #{selector.class($class, $dictionary: $dictionary)} {
              @each $value in if($side == x, right left, if($side == y, top bottom, $side)) {
                $property-name: #{$name}#{if(not ($value == ''), -#{$value}, #{$value})};

                #{string.replace($property-name, first '&' '')}: var.get($size, $dictionary: $dictionary) !important;
              }
            }
          }
        }
      }
    }
  }
}

// Examples.
// single property + single variant + single side
// @include side-variant(border, (1: unit 1), top);
// .border-top-1 {
//   border-top: var(--s-unit-1) !important;
// }

// dictionary
// @include side-variant(border, (1: unit 1), top, (border: b));
// .b-top-1 {
//   border-top: var(--s-unit-1) !important;
// }

// parent selector
// div {
  // @include side-variant('&border' '&padding', (1: unit 1), top);
  // div.border-top-1 {
  //   &border-top: var(--s-unit-1) !important;
  // }
  // div.padding-top-1 {
  //   &padding-top: var(--s-unit-1) !important;
  // }
// }

// multiple properties + single variant + single side
// @include side-variant(margin padding, (1: unit 1), top);
// .margin-top-1 {
//   margin-top: var(--s-unit-1) !important;
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1) !important;
// }

// multiple properties + single variant + multiple sides
// @include side-variant(margin padding, (1: unit 1), top bottom);
// .margin-top-1 {
//   margin-top: var(--s-unit-1) !important;
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1) !important;
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1) !important;
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1) !important;
// }

// multiple properties + multiple variants + multiple sides
// @include side-variant(margin padding, (1: unit 1, 3: unit 3), top bottom);
// .margin-top-1 {
//   margin-top: var(--s-unit-1) !important;
// }
// .margin-top-3 {
//   margin-top: var(--s-unit-3) !important;
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1) !important;
// }
// .margin-bottom-3 {
//   margin-bottom: var(--s-unit-3) !important;
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1) !important;
// }
// .padding-top-3 {
//   padding-top: var(--s-unit-3) !important;
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1) !important;
// }
// .padding-bottom-3 {
//   padding-bottom: var(--s-unit-3) !important;
// }

// multiple properties with sides + multiple variants
// @include side-variant((margin padding, left right), (1: unit 1, 3: unit 3), top bottom);
// .margin-left-1 {
//   margin-left: var(--s-unit-1) !important;
// }
// .margin-left-3 {
//   margin-left: var(--s-unit-3) !important;
// }
// .margin-right-1 {
//   margin-right: var(--s-unit-1) !important;
// }
// .margin-right-3 {
//   margin-right: var(--s-unit-3) !important;
// }
// .padding-left-1 {
//   padding-left: var(--s-unit-1) !important;
// }
// .padding-left-3 {
//   padding-left: var(--s-unit-3) !important;
// }
// .padding-right-1 {
//   padding-right: var(--s-unit-1) !important;
// }
// .padding-right-3 {
//   padding-right: var(--s-unit-3) !important;
// }

// multiple properties with sides and multiple variants
// @include side-variant((margin padding, left right, (4: unit 4, 5: unit 5)), (1: unit 1, 3: unit 3), top bottom);
// .margin-left-4 {
//   margin-left: var(--s-unit-4) !important;
// }
// .margin-left-5 {
//   margin-left: var(--s-unit-5) !important;
// }
// .margin-right-4 {
//   margin-right: var(--s-unit-4) !important;
// }
// .margin-right-5 {
//   margin-right: var(--s-unit-5) !important;
// }
// .padding-left-4 {
//   padding-left: var(--s-unit-4) !important;
// }
// .padding-left-5 {
//   padding-left: var(--s-unit-5) !important;
// }
// .padding-right-4 {
//   padding-right: var(--s-unit-4) !important;
// }
// .padding-right-5 {
//   padding-right: var(--s-unit-5) !important;
// }

// multiple sets
// @include side-variant((border,) (padding margin, left right) (padding margin, top bottom, (3: unit 3)), (1: unit 1, 2: unit 2), top);
// .border-top-1 {
//   border-top: var(--s-unit-1) !important;
// }
// .border-top-2 {
//   border-top: var(--s-unit-2) !important;
// }
// .padding-left-1 {
//   padding-left: var(--s-unit-1) !important;
// }
// .padding-left-2 {
//   padding-left: var(--s-unit-2) !important;
// }
// .padding-right-1 {
//   padding-right: var(--s-unit-1) !important;
// }
// .padding-right-2 {
//   padding-right: var(--s-unit-2) !important;
// }
// .margin-left-1 {
//   margin-left: var(--s-unit-1) !important;
// }
// .margin-left-2 {
//   margin-left: var(--s-unit-2) !important;
// }
// .margin-right-1 {
//   margin-right: var(--s-unit-1) !important;
// }
// .margin-right-2 {
//   margin-right: var(--s-unit-2) !important;
// }
// .padding-top-3 {
//   padding-top: var(--s-unit-3) !important;
// }
// .padding-bottom-3 {
//   padding-bottom: var(--s-unit-3) !important;
// }
// .margin-top-3 {
//   margin-top: var(--s-unit-3) !important;
// }
// .margin-bottom-3 {
//   margin-bottom: var(--s-unit-3) !important;
// }

// map parameter
// @include side-variant((padding margin: left right), (1: unit 1, 2: unit 2), top);
// @include side-variant((padding margin: (left right: (3: unit 3))), (1: unit 1, 2: unit 2), top);
// @include side-variant((padding margin: left right, margin padding: top bottom), (1: unit 1, 2: unit 2), top);

// Same result
// @include side-variant((padding margin: left right) (margin padding: top bottom), (1: unit 1, 2: unit 2), top);
// @include side-variant((padding margin, left right) (margin padding, top bottom), (1: unit 1, 2: unit 2), top);
// @include side-variant((padding margin, left right) (padding margin, top bottom, (3: unit 3)), (1: unit 1, 2: unit 2), top);
// @include side-variant((padding margin: left right) (margin padding: (top bottom: (3: unit 3))), (1: unit 1, 2: unit 2), top);
