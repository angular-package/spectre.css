// Functions.
@use '../list';
@use '../string';

// Status: DONE
// The `replace-parent-selector()` function.
// Replaces parent selector for the `selector.nest()`.
@function replace-parent($selector, $parent-placeholder: __PARENT__) {
  @if type-of($selector) == list and list.length($selector) > 0 {
    @if type-of(list.nth($selector, 1)) == string {
      $selector: list.replace-string($selector, '&', $parent-placeholder, 1);
    } @else {
      $selector: list.set-nth($selector, 1, list.replace-string(list.nth($selector, 1), '&', $parent-placeholder));
    }
  } @else if type-of($selector) == string {
    $selector: string.replace($selector, first '&' $parent-placeholder);
  }
  @return $selector;
}

// Examples.
// string
// @debug replace-parent('&border-width'); // __PARENT_border-width

// list
// @debug replace-parent('&' 'border' 'width'); // "__PARENT__" "border" "width"
// @debug replace-parent('&border' 'width'); // "__PARENT__border" "width"
// @debug replace-parent('&.border-width'); // __PARENT__.border-width
// @debug replace-parent('&' '.' 'class'); // "__PARENT__" "." "class"
// @debug replace-parent('&.' 'border' 'width'); // "__PARENT__." "border" "width"
// @debug replace-parent('&.' 'border' 'width' '&'); // "__PARENT__." "border" "width" "&"
