// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Variables.
@use '../variables';

// Functions.
@use '../borders.border.function';

// Modules.
@use '../../property';
@use '../radius/radius.mixin' as *;
@use '../var';

// Status: DONE
// The `borders.border()` mixin.
// @param `$width`
// @param `$style`
// @param `$color`
// @param `$radius`
// @param `$side`
// @param `$dictionary`
@mixin border(
  $width: variables.$width,
  $style: variables.$style,
  $color: variables.$color,
  $radius: variables.$radius,
  $side: variables.$side,
  $important: variables.$important,
  $dictionary: null,

  // function
  $type-function: (list string: --borders-border),
  $functions: (borders: (border: meta.get-function(border, false, borders))),
  $execute: true
) {
  @if $side {
    @if list.length($side) > 0 {
      $-side: ();
      @each $value in $side {
        $-side: map.deep-merge($-side, ($value: ($width, null, $style, $color) ()));
      }

      $side: $-side;
      @include property.property(
        (border: $side),
        $important,
        null,
        null,
        $dictionary,
        $type-function,
        $functions,
        $execute,
      );
    }
  } @else {
    border: borders.border($width, null, $style, $color, $dictionary);
  }

  // Radius.
  @if $radius {
    @if $radius == true {
      border-radius: var.var(radius);
    } @else {
      @include radius($radius...);
    }
  }
}

// Status: DONE
// The `borders.border-top()` mixin.
// @param `$width`
// @param `$style`
// @param `$color`
// @param `$radius`
// @param `$important`
// @param `$dictionary`
// @param `$type-function`
// @param `$functions`
// @param `$execute`
@mixin top(
  $width: variables.$width,
  $style: variables.$style,
  $color: variables.$color,
  $radius: variables.$radius,
  $important: variables.$important,
  $dictionary: null,
  $type-function: (list string: --borders-border),
  $functions: (borders: (border: meta.get-function(border, false, borders))),
  $execute: true,
) {
  @include border(
    $width,
    $style,
    $color,
    $radius,
    top,
    $important,
    $dictionary,
    $type-function,
    $functions,
    $execute
  );
}

// Status: DONE
// The `borders.border-right()` mixin.
// @param `$width`
// @param `$style`
// @param `$color`
// @param `$radius`
// @param `$important`
// @param `$dictionary`
// @param `$type-function`
// @param `$functions`
// @param `$execute`
@mixin right(
  $width: variables.$width,
  $style: variables.$style,
  $color: variables.$color,
  $radius: variables.$radius,
  $important: variables.$important,
  $dictionary: null,
  $type-function: (list string: --borders-border),
  $functions: (borders: (border: meta.get-function(border, false, borders))),
  $execute: true,
) {
  @include border(
    $width,
    $style,
    $color,
    $radius,
    right,
    $important,
    $dictionary,
    $type-function,
    $functions,
    $execute
  );
}

// Status: DONE
// The `borders.border-bottom()` mixin.
// @param `$width`
// @param `$style`
// @param `$color`
// @param `$radius`
// @param `$important`
// @param `$dictionary`
// @param `$type-function`
// @param `$functions`
// @param `$execute`
@mixin bottom(
  $width: variables.$width,
  $style: variables.$style,
  $color: variables.$color,
  $radius: variables.$radius,
  $important: variables.$important,
  $dictionary: null,
  $type-function: (list string: --borders-border),
  $functions: (borders: (border: meta.get-function(border, false, borders))),
  $execute: true,

) {
  @include border(
    $width,
    $style,
    $color,
    $radius,
    bottom,
    $important,
    $dictionary,
    $type-function,
    $functions,
    $execute
  );
}

// Status: DONE
// The `borders.border-left()` mixin.
// @param `$width`
// @param `$style`
// @param `$color`
// @param `$radius`
// @param `$important`
// @param `$dictionary`
// @param `$type-function`
// @param `$functions`
// @param `$execute`
@mixin left(
  $width: variables.$width,
  $style: variables.$style,
  $color: variables.$color,
  $radius: variables.$radius,
  $important: variables.$important,
  $dictionary: null,
  $type-function: (list string: --borders-border),
  $functions: (borders: (border: meta.get-function(border, false, borders))),
  $execute: true,
) {
  @include border(
    $width,
    $style,
    $color,
    $radius,
    left,
    $important,
    $dictionary,
    $type-function,
    $functions,
    $execute
  );
}

// Examples.
// div {
  // @include border; // border: var(--s-border-width-md) solid var(--s-border-color);
  // @include border($side: top right);

  // small width
  // @include border(small, $side: right bottom);

  // small width + adjust
  // @include border(sm ('+' 15%), $side: bottom left);

  // hsla color
  // @include border(small, $color: primary ':hsla', $side: right bottom);

  // $selector
  // @include border($selector: (('&:hover', '.active'),));
  // div:hover, .active {
  //   border: var(--s-border-width-md) solid var(--s-border-color);
  // }

  // $radius
  // @include border($radius: (side: left, width: sm, adjust: -15px, backup: 30px, dictionary: (border: b)));
  // div {
  //   border: var(--s-border-width-md) solid var(--s-border-color);
  //   border-top-left-radius: calc(var(--s-b-radius-sm, 30px) - 15px);
  //   border-bottom-left-radius: calc(var(--s-b-radius-sm, 30px) - 15px);
  // }

  // sides
  // @include top; // border-top: var(--s-border-width-md) solid var(--s-border-color);
  // @include right; // border-right: var(--s-border-width-md) solid var(--s-border-color);
  // @include bottom; // border-bottom: var(--s-border-width-md) solid var(--s-border-color);
  // @include left; // border-left: var(--s-border-width-md) solid var(--s-border-color);
// }
