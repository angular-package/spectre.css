// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../compare.function' as *;

// @use '../condition.function' as *;
@use '../map/values-map-get.function' as *;

// @use 'index-condition.function' as *;

@use 'is/is-list-length.function' as *;
@use 'is/is-list.function' as *;

@use 'nth/list-nth-default.function' as *;
@use 'nth/list-limit-nth.function' as *;
@use 'nth/list-range-nth.function' as *;

@use '../map/map-get-default.function' as *;

@use 'nth/list-nth.function' as *;


// Status: REVIEW: Check.
// The `list-query()` function.
@function list-query($query) {
  $result: ();
  $query: query($query);
  @debug query($query, 'occurrence');

  @if is-list(query($query, 'from'), 0) {
    @each $value in query($query, 'operand') {
      $query-result: execute-query($query, $value);

      // Add found indexes to result.
      $result: list.append(
        $result,
        if(is-list-length($query-result, 0), $query-result, null),
        $separator: list.separator(query($query, 'from'))
      );
    }
  }

  @return $result;
}

// Private `execute-query()` function.
// @function execute-query($from, $condition, $operand, $select) {
@function execute-query($query, $operand) {
  // Get result.
  $result: ();
  $select: query($query, 'select');
  $i: 1;
  @each $value in query($query, 'from') {
    // Select what to fetch,
    $selected: null;
    @if $select == index {
      $selected: $i;
    } @else if $select == nth {
      $selected: $value;
    }

    // Add to result.
    $result: if(
      compare($value, query($query, 'operator'), $operand),
      list.append($result, $selected, $separator: list.separator(query($query, 'from'))),
      $result
    );
    $i: $i + 1;
  }

  @if is-list($result, 0) {
    @if query($query, 'limit') == first {
      $result: list-limit-nth($result, 1);
    }
    @if query($query, 'limit') == last {
      $result: list-range-nth($result, -1, -1);
    }
  }

  // Select quantity.
  // @if $occurrence == all {
  //   @if $select == quantity {
  //     $result: list.length($result);
  //   }
  // }

  // Return the result.
  @return if(is-list-length($result, '==', 1), list.nth($result, 1), $result);
}

// The `query()` function.
@function query($query, $get...) {
  @if type-of($query) == map {
    @return map-get-default($query, $get, $query);
  }

  $filter: ((from: number), (range: string, to: number) (to: number) 'filter', 'limit', 'range');

  @return values-map-get(
    $query,
    ((select: string), (list: list), (operator: string), (operand: list), $filter),
    $get...
  );
}

// == equality
// ~= proximity (string)
// :== type of equal to
// :!= type of not equal to

// Structure.
// list-query(select(fetch), from(list), where(adjust-position) (operand, fetch)...)

// Examples.
$-from: (227, 'a', 2, (226, 3), 'a', 'b', 3, 'c', 4, 'd', 5, 'e', 6, 450, 'f', 7, 'g');

// @debug list-query(((all, index), $-from, '==', (4, (226, 3), 'a', 'bb'),));
// @debug list-query((index, $-from, '==', (4, (226, 3), 'a', 'bb'), (2, 5)));
@debug list-query((index, $-from, '==', (4, (226, 3), 'a', 'bb'), (2, 5)));

// @debug list-query((index, $-from, '==', (4, (226, 3), 'a', 'bb'), (range: (2, 5))));
// @debug list-query((index, $-from, '==', (4, (226, 3), 'a', 'bb'), (2, '...', 5)));

// @debug list-query($-select, $-from, (first, '==', (4, (226, 3), 'a', 'bb'))); //
// @debug list-query(index, $-from, ('==', (4, (226, 3), 'a', 'bb')) (first: 5));

// @debug list-query((1, 'c', 'a', 'c', 'bold army', 2, 'b', 3, 'c', 4, 'd'), ((any, first), '~='), 'c', 'a', 'bold ', index); // 2, 3, 5
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), all, 'c', 'a', 'bold ', index); // 6, 2, null
// @debug list-query(('a', 1, 'b', 2, 'c', 3, 'd'), (all, ':=='), string, index); // 1, 3, 5, 7

// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':=='), string, nth); // "a", "b", "c", "d"
// @debug list-query(('a', 1, 'b', 2, 'c', 3, 'd'), (all, ':=='), string, index); // 1, 3, 5, 7

// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':=='), string, number, index); //
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':!='), string, number, index); //

// @debug list-query((227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g'), ((all, first), ':=='), string, nth); //
// @debug list-query((1, 'a', 2, 'b', 3, 'c', 4, 'd'), (all, ':!='), string, number, nth); //

// @debug list-query(((all, ), '>'), (227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g'), 226, 3, nth); //

// @debug list-query((select: nth), (from: (227, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g')), (where: ('>', 226, 3)), (limit: (2, 5))); //
// @debug list-query(index, (227, 'a', 2, (226, 3), 'a', 'b', 3, 'c', 4, 'd', 5, 'e', 6, 450, 'f', 7, 'g'), (first, '==', (4, (226, 3), 'a', 'bb'))); //
