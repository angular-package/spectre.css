extends ../_layout/_docs-layout.pug

block variables
  - var slug = 'custom'
  - var parent = 'getting-started'
  - var title = 'Custom - Getting started - Spectre.css CSS Framework'
  - var description = 'Spectre.css CSS Framework is a lightweight, responsive and modern CSS framework for faster and extensible development. Spectre provides basic styles for typography and elements, flexbox based responsive layout system, pure CSS components and utilities with best practice coding and consistent design language.'

block docs-content
  +docs-heading(slug, 'Custom version', { parent, name: 'Getting Started' })
    +docs-menu('Custom version', {parent, slug},
      { anchor: 'skeleton', name: 'Skeleton' },
      { anchor: 'compiling', name: 'Compiling CSS' },
      { anchor: 'importing' , name: 'Importing Sass' },
      {
        anchor: 'customizable',
        name: 'Customizable',
        items: [
          { anchor: 'prefix', name: 'Prefix' },
          { anchor: 'borders', name: 'Borders - mixins' },
          { anchor: 'buttons' , name: 'Buttons - mixins' },
          { anchor: 'heros' , name: 'Heros - mixins and variables' },
          { anchor: 'labels' , name: 'Labels - mixins' },
          { anchor: 'toasts' , name: 'Toasts - mixins' },
        ]
      },
      {
        items: [
          { anchor: 'folders', name: 'Folder structure' }
        ]
      }
    )
    include ../_layout/_ad-g.pug
    
    p
      | You can customize your version of #[b Spectre.css] by editing Sass files in 
      code /src
      |  directory or removing unneeded components from 
      code .scss
      |  source files.
    p
      a.btn.btn-primary(href='https://github.com/angular-package/spectre.css/tree/master/src', target='_blank') Sass Source Code


    +docs-subheading('skeleton', 'Skeleton', {slug})

    p #[b Spectre.css] is a part of a bigger project, it's an 
      a(href="https://angular.io/guide/creating-libraries", target="_blank") angular library
      | , and it was generated by the 
      a(href="https://github.com/angular-package/skeleton", target="_blank") skeleton workspace
      |  with an 
      a(href="https://github.com/angular/angular-cli", target="_blank") Angular CLI
      |  version 13.0.0.
    p
      | Download the 
      a(href="https://github.com/angular-package/skeleton", target="_blank") skeleton
      |  workspace, and copy the 
      a(href="https://github.com/angular-package/spectre.css", target="_blank") spectre.css
      |  package into the #[code packages/spectre.css] folder then run the commands below.

    +docs-subheading('compiling', 'Compiling CSS', {slug})

    p
      | #[b Spectre.css] uses 
      a(href='http://sass-lang.com/', target='_blank') Sass
      |  for compiling CSS. Firstly you need to 
      a(href='https://www.npmjs.com/get-npm', target='_blank') install NPM
      | , which is used to manage dependencies.
    p Then, you can build the CSS file from the command line:
    ol
      li Navigate to the root directory of Skeleton.
      li
        | Run 
        code npm install
        |  to install all dependencies as listed in #[code package.json].
      li When completed, navigate to the root directory of #[b Spectre.css] package #[code packages/spectre.css].
      li
        | Run 
        code npm install
        | to install dev dependencies as listed in #[code package.json].
      li
        | When completed, run 
        code npm run sass:prod
        |  script to compile Sass to CSS and minify files.
      li
        | You can find compiled CSS files in 
        code /dist
        |  directory.
    p All available scripts:
    ul
      li
        code npm run sass:dev
        |  - compile Sass to CSS without minify files
      li
        code npm run sass:prod
        |  - compile Sass to CSS and minify the files
      li
        code npm run build:docs
        |  - compile Docs related files with pug
      li
        code npm run build
        |  - runs scripts in order
        code npm run sass:prod
        | , 
        code npm run sass:dev
        | , 
        code ng build spectre.css
        | , 
        code npm run build:docs 

    +docs-subheading('importing', 'Importing Sass', {slug})
    p
      | It is recommended to customize #[b Spectre.css] by importing Sass source files to your projects. In this way, you can keep #[b Spectre.css] up to date without conflicts, since #[b Spectre.css] code and your custom code are separate.
    ul
      li
        | First, create your own project and install #[b Spectre.css] via 
        a(href='#installation') NPM or other package managers
        | .
      li
        | Then create your 
        code project-name.scss
        |  file in the root folder. You can use 
        code project-name.scss
        |  to define your variables.
      li Compile the Sass file to CSS to get the custom version of #[b Spectre.css].

    //- importing
    pre.code(data-lang='Sass')
      code
        :highlight(lang="scss")
          // Example of project-name.scss
          // Define variables to override default ones
          $primary-color: #2e5bec;
          $dark-color: #3e396b;

          // Import full Spectre source code
          @use 'node_modules/@angular-package/spectre.css/spectre' as *;

    p
      | Alternatively, you can create custom 
      code _variables.scss
      |  and import it to 
      code project-name.scss
      | .

    //- custom variables
    pre.code(data-lang='Sass')
      code
        :highlight(lang="scss")
          // Example of project-name.scss
          @use 'variables' as *;

          // Import only the needed components
          @use 'node_modules/@angular-package/spectre.css/src/buttons';
          @use 'node_modules/@angular-package/spectre.css/src/forms';

    +docs-subheading('customizable-prefix', 'Custom prefix', {slug})
    p
      | You can have CSS variables with a different prefix, by changing the Sass #[code $var-prefix] variable.

    pre.code(data-lang='Scss')
      code
        :highlight(lang="scss")
          // Get variables.
          @use 'node_modules/@angular-package/spectre.css/variables' as *;

          // Change the $var-prefix
          $var-prefix: 'spectre';

          // Use the spectre.
          @use 'node_modules/@angular-package/spectre.css/spectre' as *;

    p Then, for example the #[code $border-color] Sass variable has CSS variable 
    pre.code(data-lang='Css')
      code
        :highlight(lang="css")
          --spectre-border-color: #F7F8F9;

    p The feature replaces in some minimal way custom prefixes for all classes with the gulp.
      |  Some primary classes are defined with the #[code $var-prefix], for example:
    pre.code(data-lang='Sass')
      code
        :highlight(lang="scss")
          .btn, .#{$var-prefix}-btn { ... }

    p Then, CSS file is compiled with 
    pre.code(data-lang='Css')
      code
        :highlight(lang="css")
          .btn, .spectre-btn { ... }

    div.toast.toast-error 
      | There is no gulp here so the feature is not working.
    p
    p
      | There is also a way to add custom prefix to all CSS classes. You can use 
      a(href='https://www.npmjs.com/package/gulp-css-prefix', target='_blank') gulp-css-prefix
      |  plugin and add a new Gulp task to enable it.

    //- custom prefix
    pre.code(data-lang='Bash')
      code
        :highlight(lang="Bash")
          npm install gulp-css-prefix
    p
      | To add 
      code spectre-
      |  to all classes, you can add the Gulp task to 
      code gulpfile.js
      |  file.

    //- custom prefix
    pre.code
      code
        :highlight(lang="JavaScript")
          var cssPrefix = require('gulp-css-prefix');
      
          function prefix() {
            return gulp
              .src('./dist/*.css')
              .pipe(cssPrefix('spectre-'))
              .pipe(gulp.dest('./dist'));
          }

          exports.prefix = prefix;

    p
      | After you compile your version of #[b Spectre.css] in the /dist, run 
      code gulp prefix
      |  in the directory of #[b Spectre.css].


    +docs-subheading('customizable-borders', 'Customizable borders - Border mixins', {slug})

    +docs-subheading('customizable-buttons', 'Customizable buttons - Button mixins', {slug})

    div.toast.toast-info 
      | Instead of passing the Sass variable #[code $primary-color] there is a need to provide CSS variable color name #[code 'primary-color'] cause #[code button-variant()] and #[code button-outline-variant()] mixins are modified to use #[code color()] function.
    p
    p
      | There are 2 button variant mixins in 
      code src/mixins/_button.scss
      |  to generate different color variants.
    ul
      li
        strike
          | @mixin button-variant(
          code $color
          | : $primary-color);
      li
        | @mixin button-variant(
        code $color
        | : 'primary-color');
      li
        strike
          | @mixin button-outline-variant(
          code $color
          | : $primary-color);
      li
        | @mixin button-outline-variant(
        code $color
        | : 'primary-color');

    //- button mixins
    pre.code(data-lang='Sass')
      code
        :highlight(lang="scss")
          <!-- filled button with the success color -->
          .btn-success {
            @include button-variant('success-color');
          }

          <!-- outlined button with the success color -->
          .btn-outline-success {
            @include button-outline-variant('success-color');
          }

    +docs-subheading('customizable-heros', 'Customizable heros - Hero mixins and variables', {slug})

    +docs-subheading('customizable-labels', 'Customizable labels - Labels mixins', {slug})

    p

    +docs-subheading('customizable-toasts', 'Customizable toasts - Toast mixins', {slug})

    p 

    +docs-subheading('folders', 'Folder structure', {slug})

    //- folder structure
    pre.code
      code
        :highlight
          spectre/
          ├── dist/                           // Build folder
          │   ├── spectre-exp.css
          │   ├── spectre-exp.min.css
          │   ├── spectre-icons.css
          │   ├── spectre-icons.min.css
          │   ├── spectre.css
          │   └── spectre.min.css
          │
          ├── docs/
          │   ├── dist/                       // Pre-built CSS folder
          │   │   ├── spectre-exp.css
          │   │   ├── spectre-exp.min.css
          │   │   ├── spectre-icons.css
          │   │   ├── spectre-icons.min.css
          │   │   ├── spectre.css
          │   │   └── spectre.min.css
          |   ├── css/                        // Docs CSS files
          │   │   └── docs.css
          |   ├── src/
          │   │   ├── scss                    // Docs Sass files
          │   │   │   └── docs.scss
          │   │   ├── index.pug               // Docs Pug files
          │   │   └── ...
          │   ├── examples/                   // Example tempalte
          │   │   └── starter.html
          │   ├── ../
          │   ├── index.html
          │   └── ...
          │
          ├── src/                            // Source Sass files
          │   ├── spectre.scss
          │   ├── spectre-icons.scss
          │   ├── spectre-exp.scss
          │   ├── _mixins.scss
          │   ├── _variables.scss
          │   └── ...
          │
          ├── gulpfile.js (no gulp)
          ├── package.json
          └── ...

    +docs-pagination({ path: 'variables', name: 'Variables' }, { path: 'browsers', name: 'Browser support' })

    include ../_layout/_ad-c.pug

  include ../_layout/_footer.pug
