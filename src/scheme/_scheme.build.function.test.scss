// Functions.
@use 'scheme.build.function' as *;

$-theme: (
  dark: (),
  basic: (
    // core: (dark, light, accent, [primary [color, dark, light]], [secondary [color, dark, light]]),
    core: ((dark, 15%), light, accent, primary, primary dark, primary light, ),
    // core: (
    //   dark: (dark color, -15%),
    //   light: light color,
    //   accent: accent color,
    //   primary: primary color,
    //   primary dark: primary dark,
    //   primary light: primary light,
    //   secondary: secondary color,
    //   secondary dark: secondary dark,
    //   secondary light: secondary light
    // ),

    // build variant
    ['gray', secondary, primary large]: [xs [color, dark, light]],
    // ['secondary']: [xs [color, dark, light]],
    // 'gray': (
    //   'gray': 'gray' color,
    //   'gray' dark: 'gray' dark,
    //   'gray' light: 'gray' light
    // ),

    // [bg]: [color, dark, light],
    bg: (
      bg: bg color,
      bg dark: (bg dark, -30%),
      bg light: bg light
    ),

    // [border]: [color, dark, light],
    border: (
      border dark: border dark,
      border light: border light
    ),

    // [link]: [color, dark, light],
    link: (
      link: link color,
      link dark: link dark,
      link light: link light
    ),

    // variant
    (chat, sidebar, footer large): outline (disabled, error, info, success, warning),
    // control: (disabled, error, info, success, warning),

    (control,): (
      disabled: disabled color,
      error: error color,
      info: info color,
      success: success color,
      warning: warning color
    ),

    'body.palette': (
      body bg: body bg color,
      body font: body font color
    ),

    'other.palette': (
      code: code color,
      highlight: highlight color
    )
  )
) !default;

// input data
// [bracketed list] - build color variant
// '*' - all from the given theme
// '*.palette' ends with .palette
// (class variant)

// all * indicator
// @debug build($-theme, (basic: '*', dark: '*'));

// all *.[string] indicator
// @debug build($-theme, (basic: '*.palette')); // (basic: ("body.palette": (body bg: body bg color, body font: body font color), "other.palette": (code: code color, highlight: highlight color)))
// @debug build($-theme, (basic: ('*.palette', '*.colors'))); // (basic: ("body.palette": (body bg: body bg color, body font: body font color), "other.palette": (code: code color, highlight: highlight color)))

// variant
// @debug build($-theme, (basic: core bg)); // ()
// @debug build($-theme, (basic: footer large)); // ()
// @debug build($-theme, (basic: (control big,))); // ()
// @debug build($-theme, (basic: (control big, control,))); // (basic: (control: (disabled: disabled color, error: error color, info: info color, success: success color, warning: warning color)))

// direct .palette
// @debug build($-theme, (basic: ('body.palette', 'other.palette'))); // (basic: ("body.palette": (body bg: body bg color, body font: body font color), "other.palette": (code: code color, highlight: highlight color)))
// @debug build($-theme, (basic: [bg, 'gray'])); // (basic: ("gray": (gray xs: gray xs color, gray xs dark: gray xs color dark, gray xs light: gray xs color light)))

// bracketed palette
// @debug build($-theme, (basic: [primary xs,]));
// @debug build($-theme, (basic: [primary xs, secondary]));

// multiple
// @debug build($-theme, (basic: ('*.palette', control big)));
// @debug build($-theme, (basic: [primary xs, secondary] '*.palette' (control big)));
// @debug build($-theme, (basic: [secondary, 'gray']), (basic: '*.palette'));
