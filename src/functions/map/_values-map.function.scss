// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../../functions/variable.function' as *;
@use '../compare.function' as *;

// - list.
@use '../list/has/type/list-has-type.function' as *;
@use '../list/is/is-list-length.function' as *;
@use '../list/is/is-list.function' as *;
@use '../list/nth/list-nth-default.function' as *;
@use '../list/nth/list-nth-range.function' as *;

// - map.
@use 'map-get-default.function' as *;
@use 'map-set.function' as *;
@use 'values-type-map.function' as *;

// - string.
@use '../string';


// Status: REVIEW: Function name
// The `values-map()` function returns map built from the given `$values` under the given `$keys`.
@function values-map($values, $keys...) {
  $map: ();

  @if is-list-length($values, '>', 0) {
    $index: 1;
    @each $key in $keys {
      @if is-list-length($values, '>=', $index) {
        // Get the `$value` from the `$values` under the given `$index`.
        $value: list-nth-default($values, $index);

        @if is-list($key) {
          $i: 1;
          @each $-key in $key {
            $map: -map-set($map, $-key, $value, $i, $key);
            $i: $i + 1;
          }

        } @else {
          $map: -map-set($map, $key, $value);
        }
      }

      // FEATURE: Arbitrary parameter with the three dots 'name...' indicates to set map rest of the values under the `name` key.
      @if $index == list.length($keys) {
        @if type-of($key) == string and string.index($key, variable(query, indicator, arbitrary)) {
          $map: -map-set(
            $map,
            string.replace($key, variable(query, indicator, arbitrary), ''),
            list-nth-range($values, $index, last)
          );
        }
      }

      $index: $index + 1;
    }
  }

  @return $map;
}

// Private `-map-set()` function.
@function -map-set($map, $key, $value, $i: 0, $keys: ()) {
  @each $name, $type in $key {
    $-value: $value;
    $type: -type($type);

    // Key name as type.
    @if is-list($name) {
      $-name: $type;
      $type: $name;
      $name: $-name;

      // Pick the value from the map.
      @if type-of($name) == string {
        $-value: if(
          compare($name, '!=', list),
          map-get-default($-value, $name),
          map-get-default($-value, $name, $-value)
        );
        $value: -type($value);
      }

      @if $-value {
        @if not is-list($-value) and not (type-of($-value) == map) {
          $-value: list.append((), $-value);
        }
        @if $name != list {
          @if not (type-of($-value) == map) {
            $map: map-set($map, $name, values-type-map($-value, $type...));
          }
        } @else {
          @if type-of($-value) == $name {
            $map: map.merge($map, values-type-map($-value, $type...));
          }
        }
      }

    } @else if type-of($name) == map {
      @if type-of($value) == map {
        $map: map.merge($map, values-type-map(($value,), $name));
      }

    } @else {
      $-value: if(
        (is-list($value) or not (meta.type-of($value) == map)) and $i > 0,
        list-nth-default($value, $i),
        $value
      );

      // FEATURE: Parameter with the dot indicates map '.example'.
      // . Indicates the $-value should be taken from the map.
      @if type-of($name) == string and string.index($name, variable(query, indicator, map)) {
        $name: string.replace($name, variable(query, indicator, map), '');
        $-value: map-get-default($-value, $name);
      } @else {
        $-value: map-get-default($-value, $name, $-value);
      }

      @if $-value {
        // FEATURE: Parameter with the comma indicates an optional parameter, and is activated when the following parameter exists.
        // Optional parameter.
        @if type-of($name) == string and string.index($name, variable(query, indicator, optional)) {
          $name: string.replace($name, variable(query, indicator, optional), '');
          @if not list-nth-default($value, $i + 1) {
            $name: list-nth-default($keys, $i + 1);
          }
        }

        // Check the value type.
        @if $type {
          @if list-has-type($type, list) {
            @each $t in $type {
              $map: -set($map, $name, $-value, $t);
            }
          } @else {
            $map: -set($map, $name, $-value, $type);
          }
        } @else {
          $map: map-set($map, $name, $-value);
        }
      }
    }
  }

  @return $map;
}

// Private `-set()` function.
@function -set($map, $key, $value, $type) {
  @if list-has-type($type, map) {
    $value: values-type-map($value, $type...);
    @if is-list-length($value) {
      $map: map-set($map, $key, $value);
    }
  } @else {
    $map: map-set($map, $key, $value, $type...);
  }
  @return $map;
}

@function -type($value) {
  @if type-of($value) == string and string.index($value, variable(query, indicator, type)) {
    $value: variable(query, string.replace($value, variable(query, indicator, type), '')) or $value;
  }
  @return $value;
}

// Key.
// . - Char indicates that if key does not exist in the map then return null value, not the map by default.
