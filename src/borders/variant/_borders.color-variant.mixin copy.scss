// Sass.
@use 'sass:list';
// @use 'sass:map';
@use 'sass:meta';

// Variables.
@use '../variables/borders.var' as *;

// Modules.
@use '../../color';
@use '../../map';
@use '../../scheme';

// Functions.
@use '../../class/variant/class.variant.mixin' as *;
@use '../../values/values.combine.function' as *;
@use '../functions/borders.class.function' as *;

// Mixins.
@use 'borders.color.mixin' as *;

// Status: DONE
// The `color-variant()` mixin.
// @mixin color-variant(
//   // $class: map.get($border, class),
//   $variant: map.get($border, theme) map.get($border, variant, color),
//   $pseudo-class: (),
//   $dictionary: ()
// ) {
//   @if type-of($variant) == list {
//     @include scheme.load($variant...) using($scheme, $palette, $variant) {
//       @include color.variant((border: add-property-attribute($variant, color)));
//     }
//   } @else {
//     @include color.variant((border: add-property-attribute($variant, color)));
//   }
// }


// @function add-property-attribute($variant, $attribute) {
//   @if type-of($variant) == map {
//     @each $key, $value in $variant {
//       @if type-of($key) == string {
//         $variant: map.key-replace($variant, $key, list.join($key, $attribute, space));
//       } @else if list.length($key) > 0 and not list.index($key, $attribute) {
//         $new-key: ();
//         @each $-key in if(list.separator($key) == comma, $key, ($key)) {
//           $new-key: list.append($new-key, list.append($-key, $attribute, space), comma);
//         }

//         $variant: map.key-replace($variant, $key, $new-key);
//       }
//     }
//   }
//   @return $variant;
// }

