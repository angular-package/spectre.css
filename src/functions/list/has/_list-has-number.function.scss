// Functions.
@use '../is/is-list-length.function' as *;
@use 'type/list-has-type.function' as *;
@use 'value/list-has-values.function' as *;

// Status: DONE
// The `list-has-number()` function checks whether the given `$list` has `any/all` of given in the arbitrary argument `$numbers`.
@function list-has-number($list, $condition: any, $numbers...) {
  // Checks whether the given `$list` has `any/all` elements of number type.
  $has: list-has-type($list, number, $condition);
  @if is-list-length($numbers, 0) and $has {
    $has: list-has-values($list, $condition, $numbers...);
  }
  @return $has;
}

// Examples.
// -- true
// @debug list-has-number((1, 2, '3', '5', 4)); // true
// @debug list-has-number((1, 2, 3, 5, 4)); // true
// @debug list-has-number((1, 2, 3, 5, 4), all); // true
// @debug list-has-number(('1', 2, '3', 5, '4'), any, 5, 2, 10); // true

// -- false
// @debug list-has-number((1, 2, '3', '5', 4), all); // false
// @debug list-has-number(('1', '2', '3', '5', '4')); // false
// @debug list-has-number((1, '2', 3, '5', '4'), any, 5, 4); // false

// @debug list-has-number((1, 1, 1), (all, '=='), 1); // true
// @debug list-has-number((1, 11, 111), (all, '=='), 1); // false
// @debug list-has-number((1, 2, 3), (any, '=='), 3); // false

// @debug list-has-number((1, 2, 3), (all, '>'), 1); // false
// @debug list-has-number((1, 2, 3), (all, '>='), 1); // true

// @debug list-has-number((1, 2, 3), (any, '>'), 1); // true
// @debug list-has-number((1, 2, 3), (any, '>'), 4); // false

// @debug list-has-number((4, 10, 15), (any, '<'), 15); // true
// @debug list-has-number((4, 10, 15), (all, '<'), 15); // false
// @debug list-has-number((4, 10, 15), (all, '<='), 15); // true
// @debug list-has-number((4, 10, 15), (any, '!='), 15); // true

// @debug list-has-number((15, 15, 15), (any, '!='), 15); // false

// @debug list-has-number((4, 10, 15), (any, '>'), 15, 20, 25); // false
// @debug list-has-number((4, 10, 15), (any, '>'), 15, 14, 25); // true
