// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../../functions/variable.function' as *;

// - list.
@use '../list/has/type/list-has-type.function' as *;
@use '../list/nth/list-nth-default.function' as *;
@use '../list/nth/list-nth-from.function' as *;

// - map.
@use '../map/map-get-default.function' as *;
@use '../map/map-set.function' as *;
@use 'values-type-map.function' as *;

// - string.
@use '../string';

// Status: REVIEW: Function name
// The `values-map()` function returns map built from the given `$values` under the given `$keys`.
@function values-map($values, $keys...) {
  $map: ();
  @if list.length($values) > 0 {
    $index: 1;
    @each $key in $keys {
      @if list.length($values) >= $index {
        // Get the `$value` from the `$values` under the given `$index`.
        $value: list-nth-default($values, $index);
        @if type-of($key) == list {
          $i: 1;
          @each $-key in $key {
            $map: -map-set($map, $-key, $value, $i, $key);
            $i: $i + 1;
          }
        } @else {
          $map: -map-set($map, $key, $value);
        }
      }

      // FEATURE: Arbitrary parameter with the three dots 'name...' indicates to set map rest of the values under the `name` key.
      @if list.length($keys) == $index and list.length($values) >= $index and -is-key-arbitrary($key) {
        $map: -map-set(
          $map,
          string.replace($key, variable(query, indicator, arbitrary), ''),
          list-nth-from($values, $index)
        );
      }

      $index: $index + 1;
    }
  }

  @return $map;
}

// Private `-map-set()` function.
@function -map-set($map, $key, $value, $i: 0, $keys: ()) {
  $original-value: $value;

  @each $name, $type in $key {
    @if -is-key-arbitrary($name) {
      @return $map;
    }

    // Set `$value` to original.
    $value: $original-value;
    $type: -type($type);

    // Key name as type.
    @if type-of($name) == list {
      $-name: $type;
      $type: $name;
      $name: $-name;

      // Pick the value from the map.
      @if type-of($name) == string {
        $value: if(not ($name == list), map-get-default($value, $name), map-get-default($value, $name, $value));

        // $value: -type($value); // REVIEW: Check.
      }

      @if not (type-of($value) == list) and not (type-of($value) == map) {
        $value: list.append((), $value);
      }

      @if $name != list {
        @if not (type-of($value) == map) {
          $map: map-set($map, $name, values-type-map($value, $type...));
        }
      } @else {
        @if type-of($value) == $name {
          $map: map.merge($map, values-type-map($value, $type...));
        }
      }

    } @else if type-of($name) == map {
      @if type-of($value) == map {
        $map: map.merge($map, values-type-map(($value,), $name));
      }

    } @else {
      $value: if(
        (meta.type-of($original-value) == list or not (meta.type-of($original-value) == map)) and $i > 0,
        list-nth-default($original-value, $i),
        $original-value
      );


      // FEATURE: Parameter with the dot indicates map '.example'.
      // . Indicates the $value should be taken from the map or return null.
      // @if type-of($name) == string and string.index($name, variable(query, indicator, map)) == 1 {
      @if -is-key-map($name) {
        $name: string.replace($name, variable(query, indicator, map), '');
        $value: map-get-default($value, $name);
      } @else {
        $value: map-get-default($value, $name, $value);
      }

      // FEATURE: Parameter with the comma indicates an optional parameter, and is activated when the following parameter exists.
      // Optional parameter.
      @if -is-key-optional($name) {
        $name: string.replace($name, variable(query, indicator, optional), '');
        @if not list-nth-default($original-value, $i + 1) {
          $name: list-nth-default($keys, $i + 1);
        }
      }

      // Check the value type.
      @if $type {
        @if list-has-type($type, any, '==', list) {
          @each $-type in $type {
            $map: -set($map, $name, $value, $-type);
          }
        } @else {
          $map: -set($map, $name, $value, $type);
        }
      } @else {
        $map: map-set($map, $name, $value);
      }
    }
  }

  @return $map;
}

// Private `-set()` function.
@function -set($map, $key, $value, $type) {
  @if list-has-type($type, any, '==', map) {
    $value: values-type-map($value, $type...);
    @if list.length($value) > 0 {
      $map: map-set($map, $key, $value);
    }
  } @else {
    $map: map-set($map, $key, $value, $type...);
  }
  @return $map;
}

//
@function -type($key) {
  @if -is-key-type($key) {
    $key: variable(query, string.replace($key, variable(query, indicator, type), '')) or $key;
  }
  @return $key;
}

// Returns true if the given $key has first char equal to ':' indicating type key.
@function -is-key-type($key) {
  @return type-of($key) == string and string.index($key, variable(query, indicator, type)) == 1;
}

// Returns true if the given $key has last three chars '.' indicating arbitrary key.
@function -is-key-arbitrary($key) {
  @return type-of($key) == string and string.index($key, variable(query, indicator, arbitrary)) == string.length($key) - 2;
}

// Returns true if the given $key has last three chars '.' indicating map key.
@function -is-key-map($key) {
  @return type-of($key) == string and string.index($key, variable(query, indicator, map)) == 1;
}

@function -is-key-optional($key) {
  @return type-of($key) == string and string.index($key, variable(query, indicator, optional));
}

// Key.
// . - Char indicates that if key does not exist in the map then return null value, not the map by default.
