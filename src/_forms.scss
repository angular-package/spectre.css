// Functions.
@use 'functions/color/color.function' as *;
@use 'functions/var/get-var.function' as *;
@use 'functions/var/unit-var.function' as *;
@use 'functions/var/var-negative.function' as *;

// Mixins.
@use 'mixins/border/border.mixin' as *;
@use 'mixins/color/color.mixin' as *;
@use 'mixins/color/background.mixin' as *;
@use 'mixins/color/background-color.mixin' as *;
@use 'mixins/margin.mixins' as *;
@use 'mixins/padding.mixins' as *;
@use 'mixins/shadow' as *;
@use 'mixins/transition.mixin' as *;
@use 'mixins/z-index.mixin' as *;

// $transition: .2s;

// Forms
.form-group {
  &:not(:last-child) {
    @include margin-bottom(('layout-spacing', true));
  }
}

fieldset {
  @include margin-bottom(('layout-spacing', ('suffix': 'lg', unit: true)));
}

legend {
  @include margin-bottom(('layout-spacing', ('suffix': 'lg', unit: true)));
  font-size: get-var('font-size', $suffix: 'lg');
  font-weight: 500;
}

// Form element: Label
.form-label {
  display: block;
  padding: calc(get-var('control-padding-y') + get-var('border-width')) 0; // TODO: use adjust / update adjust to use CSS vars
  line-height: get-var('line-height');

  &.label-sm {
    padding: calc(get-var('control-padding-y', $suffix: 'sm') + get-var('border-width')) 0;
    font-size: get-var('font-size', $suffix: 'sm');
  }

  &.label-lg {
    padding: calc(get-var('control-padding-y', $suffix: 'lg') + get-var('border-width')) 0;
    font-size: get-var('font-size', $suffix: 'lg');
  }
}

// Form element: Input
.form-input {
  position: relative;
  appearance: none;
  display: block;
  max-width: 100%;
  width: 100%;
  height: get-var('control-size');
  @include padding('control-padding-y', 'control-padding-x');
  @include border($color: 'border-dark', $radius: 'border-radius');
  outline: none;
  @include background('bg-light');
  background-image: none;
  @include color('body-font');
  font-size: get-var('font-size');
  line-height: get-var('line-height');
  @include transition(background, border, box-shadow, color);

  &:focus {
    border-color: color('primary');
    @include control-shadow();
  }
  &::placeholder {
    @include color('gray');
  }

  // Input sizes
  &.input-sm {
    height: get-var('control-size', $suffix: 'sm');
    @include padding('control-padding-y-sm', 'control-padding-x-sm');
    font-size: get-var('font-size', $suffix: 'sm');
  }

  &.input-lg {
    height: get-var('control-size', $suffix: 'lg');
    @include padding('control-padding-y-lg', 'control-padding-x-lg');
    font-size: get-var('font-size', $suffix: 'lg');
  }

  &.input-inline {
    display: inline-block;
    width: auto;
    vertical-align: middle;
  }

  // Input types
  &[type="file"] {
    height: auto;
  }
}

// Form element: Textarea
textarea.form-input {
  &,
  &.input-lg,
  &.input-sm {
    height: auto;
  }
}

// Form element: Input hint
.form-input-hint {
  @include margin-top('unit-1');
  @include color('gray');
  font-size: get-var('font-size', $suffix: 'sm');

  .has-success &,
  .is-success + & {
    @include color('success');
  }

  .has-error &,
  .is-error + & {
    @include color('error');
  }
}

// Form element: Select
.form-select {
  appearance: none;
  width: 100%;
  height: get-var('control-size');
  @include padding('control-padding-y', 'control-padding-x');
  @include border($color: 'border-dark', $radius: 'border-radius');
  outline: none;
  @include background('bg-light');
  color: inherit;
  font-size: get-var('font-size');
  line-height: get-var('line-height');
  vertical-align: middle;

  &:focus {
    border-color: color('primary');
    @include control-shadow();
  }
  &::-ms-expand {
    display: none;
  }

  // Select sizes
  &.select-sm {
    height: get-var('control-size', $suffix: 'sm');
    padding: get-var('control-padding-y', $suffix: 'sm') calc(get-var('control-icon-size') + get-var('control-padding-x', $suffix: 'sm')) get-var('control-padding-y', $suffix: 'sm') get-var('control-padding-x', $suffix: 'sm'); // TODO: Use the padding mixin
    font-size: get-var('font-size', $suffix: 'sm');
  }

  &.select-lg {
    height: get-var('control-size', $suffix: 'lg');
    padding: get-var('control-padding-y', $suffix: 'lg') calc(get-var('control-icon-size') + get-var('control-padding-x', $suffix: 'lg')) get-var('control-padding-y', $suffix: 'lg') get-var('control-padding-x', $suffix: 'lg');
    font-size: get-var('font-size', $suffix: 'lg');
  }

  // Multiple select
  &[size],
  &[multiple] {
    height: auto;
    @include padding('control-padding-y', 'control-padding-x');

    option {
      @include padding('unit-h', 'unit-1');
    }
  }
  &:not([multiple]):not([size]) {
    padding-right: calc(get-var('control-icon-size') + get-var('control-padding-x')); // TODO: Use the padding mixin
    background: color('bg-color-light') url("data:image/svg+xml;charset=utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%204%205'%3E%3Cpath%20fill='%23667189'%20d='M2%200L0%202h4zm0%205L0%203h4z'/%3E%3C/svg%3E") no-repeat right 0.35rem center / 0.4rem 0.5rem;
  }
}

// Form Icons
.has-icon-left,
.has-icon-right {
  position: relative;

  .form-icon {
    @include z-index('0', 1);
    position: absolute;
    top: 50%;
    @include margin('unit-0', 'control-padding-y');
    width: get-var('control-icon-size');
    height: get-var('control-icon-size');
    transform: translateY(-50%);
  }
}

.has-icon-left {
  .form-icon {
    left: get-var('border-width');
  }

  .form-input {
    padding-left: calc(get-var('control-icon-size') + get-var('control-padding-y') * 2); // TODO: Use the padding mixin
  }
}

.has-icon-right {
  .form-icon {
    right: get-var('border-width');
  }

  .form-input {
    padding-right: calc(get-var('control-icon-size') + get-var('control-padding-y') * 2); // TODO: Use the padding mixin
  }
}

// Form element: Checkbox and Radio
.form-checkbox,
.form-radio,
.form-switch {
  position: relative;
  margin: calc((get-var('control-size') - get-var('control-size', $suffix: 'sm')) * 0.5) 0;

  display: block;
  min-height: get-var('control-size', $suffix: 'sm');
  line-height: get-var('line-height');
  padding: calc((get-var('control-size', $suffix: 'sm') - get-var('line-height')) / 2) get-var('control-padding-x') calc((get-var('control-size', $suffix: 'sm') - get-var('line-height')) / 2) calc(get-var('control-icon-size') + get-var('control-padding-x')); // old spectre.css

  input {
    position: absolute;
    margin: -1px;
    overflow: hidden;
    width: 1px;
    height: 1px;
    clip: rect(0, 0, 0, 0);

    &:focus + .form-icon {
      border-color: ('primary');
      @include control-shadow();
    }
    &:checked + .form-icon {
      border-color: color('primary');
      @include background('primary');
    }
  }

  .form-icon {
    position: absolute;
    display: inline-block;
    cursor: pointer;
    @include border($color: 'border-dark');
    @include transition(background, border, box-shadow, color);
  }

  // Input checkbox, radio and switch sizes
  &.input-sm {
    margin: 0;
    font-size: get-var('font-size', $suffix: 'sm');
  }

  &.input-lg {
    margin: calc((get-var('control-size', $suffix: 'lg') - get-var('control-size', $suffix: 'sm')) / 2) 0;
    font-size: get-var('font-size', $suffix: 'lg');
  }
}

.form-checkbox,
.form-radio {
  .form-icon {
    top: calc((get-var('control-size', $suffix: 'sm') - get-var('control-icon-size')) / 2); // TODO: Use the var-adjust.
    left: 0;
    width: get-var('control-icon-size');
    height: get-var('control-icon-size');
    @include background('bg-light');
  }

  input {
    &:active + .form-icon {
      @include background('bg-dark');
    }
  }
}
.form-checkbox {
  .form-icon {
    border-radius: get-var('border-radius');
  }

  input {
    &:checked + .form-icon {
      &::before {
        position: absolute;
        top: 50%;
        left: 50%;
        margin-left: -3px;
        margin-top: -6px;
        content: "";
        width: 6px;
        height: 9px;
        transform: rotate(45deg);
        @include border('lg', $color: 'light', $radius: 'border-radius');
        border-left-width: 0;
        border-top-width: 0;
        background-clip: padding-box;
      }
    }
    &:indeterminate + .form-icon {
      border-color: color('primary');
      @include background('primary');
      &::before {
        position: absolute;
        top: 50%;
        left: 50%;
        margin-left: -5px;
        margin-top: -1px;
        content: "";
        width: 10px;
        height: 2px;
        @include background('bg-light');
      }
    }
  }
}
.form-radio {
  .form-icon {
    border-radius: 50%;
  }

  input {
    &:checked + .form-icon {
      &::before {
        position: absolute;
        top: 50%;
        left: 50%;
        content: "";
        width: 6px;
        height: 6px;
        transform: translate(-50%, -50%);
        border-radius: 50%;
        @include background('bg-light');
      }
    }
  }
}

// Form element: Switch
.form-switch {
  padding-left: calc(get-var('unit-8') + get-var('control-padding-x')); // TODO: Use the padding mixin

  .form-icon {
    top: calc((get-var('control-size', $suffix: 'sm') - unit-var('4')) / 2 - get-var('border-width'));
    left: 0;
    width: unit-var('8');
    height: calc(unit-var('4') + get-var('border-width') * 2);
    border-radius: calc(unit-var('2') + get-var('border-width'));
    @include background('gray');
    background-clip: padding-box;
    &::before {
      // Position.
      position: absolute;
      top: 0;
      left: 0;

      // Display.
      content: "";
      display: block;
      width: unit-var('4');
      height: unit-var('4');

      border-radius: 50%;
      @include background('bg-light');
      @include transition(background, border, box-shadow, color, left);
    }
  }

  input {
    &:checked + .form-icon {
      &::before {
        left: 14px;
      }
    }
    &:active + .form-icon {
      &::before {
        @include background('bg');
      }
    }
  }
}

// Form element: Input groups
.input-group {
  display: flex;

  .input-group-addon {
    @include padding('control-padding-y', 'control-padding-x');
    @include border($color: 'border-dark', $radius: 'border-radius');
    @include background('bg');
    line-height: get-var('line-height');
    white-space: nowrap;

    &.addon-sm {
      @include padding('control-padding-y-sm', 'control-padding-x-sm');
      font-size: get-var('font-size', $suffix: 'sm');
    }

    &.addon-lg {
      @include padding('control-padding-y-lg', 'control-padding-x-lg');
      font-size: get-var('font-size', $suffix: 'lg');
    }
  }

  .form-input,
  .form-select {
    flex: 1 1 auto;
    width: 1%;
  }

  .input-group-btn {
    @include z-index('0');
  }

  .form-input,
  .form-select,
  .input-group-addon,
  .input-group-btn {
    &:first-child:not(:last-child) {
      border-bottom-right-radius: 0;
      border-top-right-radius: 0;
    }
    &:not(:first-child):not(:last-child) {
      margin-left: var-negative(get-var('border-width'));
      border-radius: 0;
    }
    &:last-child:not(:first-child) {
      margin-left: var-negative(get-var('border-width'));
      border-bottom-left-radius: 0;
      border-top-left-radius: 0;
    }
    &:focus {
      @include z-index('0', 1);
    }
  }

  .form-select {
    width: auto;
  }

  &.input-inline {
    display: inline-flex;
  }
}

// Form validation states
.form-input,
.form-select {
  .has-success &,
  &.is-success {
    border-color: color('success');
    @include background('success', $lightness: +53%);
    &:focus {
      @include control-shadow('success');
    }
  }

  .has-error &,
  &.is-error {
    border-color: color('error');
    @include background('error', $lightness: +53%);
    &:focus {
      @include control-shadow('error');
    }
  }
}

.form-checkbox,
.form-radio,
.form-switch {
  .has-error &,
  &.is-error {
    .form-icon {
      border-color: color('error');
    }

    input {
      &:checked + .form-icon {
        border-color: color('error');
        @include background('error');
      }

      &:focus + .form-icon {
        border-color: color('error');
        @include control-shadow('error');
      }
    }
  }
}

.form-checkbox {
  .has-error &,
  &.is-error {
    input {
      &:indeterminate + .form-icon {
        border-color: color('error');
        @include background('error');
      }
    }
  }
}

// validation based on :placeholder-shown (Edge doesn't support it yet)
.form-input {
  &:not(:placeholder-shown) {
    &:invalid {
      border-color: color('error');
      &:focus {
        @include background('error', $lightness: +53%);
        @include control-shadow('error');
      }

      & + .form-input-hint {
        @include color('error');
      }
    }
  }
}

// Form disabled and readonly
.form-input,
.form-select {
  &:disabled,
  &.disabled {
    opacity: .5;
    cursor: not-allowed;
    @include background-color('disabled');
  }
}

.form-input {
  &[readonly] {
    @include background-color('bg');
  }
}

input {
  &:disabled,
  &.disabled {
    & + .form-icon {
      opacity: .5;
      cursor: not-allowed;
      @include background-color('disabled');
    }
  }
}

.form-switch {
  input {
    &:disabled,
    &.disabled {
      & + .form-icon::before {
        @include background-color('disabled');
      }
    }
  }
}

// Form horizontal
.form-horizontal {
  @include padding(('layout-spacing', true), 'unit-0');

  .form-group {
    display: flex;
    flex-wrap: wrap;
  }
}

// Form inline
.form-inline {
  display: inline-block;
}
