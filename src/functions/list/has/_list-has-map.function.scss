// Functions.
@use 'type/list-has-type.function' as *;
@use 'value/list-has-values.function' as *;

// Status: DONE
// The `list-has-map()` function.
// ? $occurrence: all any only
// ? $operator: == !=
@function list-has-map($list, $occurrence: any, $operator: null, $maps...) {
  $has: false;
  @if type-of($operator) == string {
    $has: if(
      list-has-type($maps, only, '==', map),
      list-has-values($list, $occurrence, $operator, $maps...),
      false
    );
  } @else {
    $has: list-has-type($list, $occurrence, '==', map);
  }
  @return $has;
}

// Examples.
// any
// @debug list-has-map(((a: 1), )); // true
// @debug list-has-map(((a: 1), (b: 2)), any); // true
// @debug list-has-map(((a, 1), a, b, c)); // false
// @debug list-has-map(((a, 1), a, b, c), any); // false

// all
// @debug list-has-map(((a: 1), (a: 2), (a: 3)), all, '==', (a: 1), (a: 2)); // true

// only
// @debug list-has-map(((a: 1), (b: 2)), only); // true
// @debug list-has-map(((a: 1), (b: 2), a, 1, (b, c), 2d), only); // false
// @debug list-has-map(((a: 1), (b: 2), a, 1, (b, c), 2d), only, '==', (a: 1)); // false
// @debug list-has-map(((a: 1), (a: 1), (a: 1)), only, '==', (a: 1)); // true
