// Functions.
@use 'list.has-all-values.function' as *;
@use 'list.has-any-values.function' as *;
@use 'list.has-value.function' as *;

// Status: DONE
// The `has-values()` function.
// ? $occurrence: all, any, only
// ? $operator: '==', '!=', '~=', '!~=', ':==', ':!=', '>', '>=', '<', '<=',
// ?            '(:)', '(:)==', '(:)!=', '(:)>', '(:)>=', '(:)<', '(:)<=',
// ?            '(,)', '(,)==', '(,)!=', '(,)>', '(,)>=', '(,)<', '(,)<='
// ? $operator: true/false for multiple comparison
@function has-values($list, $occurrence: any, $operator: '==', $values...) {
  $result: if($occurrence == all, true, false);
  @if type-of($operator) == string {
    @return -list-has-values($list, $occurrence, $operator, $values...);
  } @else {
    $expected-result: $operator;
    @each $condition in $values {
      $result: -list-has-values($list, $condition...) == $expected-result;
      @if ($occurrence == all and not $result) or ($occurrence == any and $result) {
        @return $result;
      }
    }
  }
  @return $result;
}

// Private `-list-has-values()` function.
@function -list-has-values($list, $occurrence, $operator, $operand...) {
  $result: false;

  // Check list by using where parameters.
  @if $occurrence == all {
    $result: has-all-values($list, $operator, $operand...);
  } @else if $occurrence == any {
    $result: has-any-values($list, $operator, $operand...);
  } @else if $occurrence == only {
    $result: list-has-value($list, $occurrence, $operator, $operand...);
  }
  @return $result;
}

// Parameters.
// ? Approach 1 - Single check. (list, occurrence, operator, operands...): bool
// ? Approach 2 - Single check. (list, occurrence operator operands...): bool
// ? Approach 3 - Multiple checks. (list, occurrence operator operands..., occurrence operator operands..., occurrence operator operands...): bool

// Examples.
// any true
// @debug has-values(('a', 'b', 'c'), any, '==', 'a', 'b', 'c', 'd'); // true
// @debug has-values(('a', 'b', 'c'), any, '==', 'c', 'a'); // true
// @debug has-values(('a', 'b', 'c', 1), any, '==', 1); // true
// @debug has-values(('a', 'b', 'c'), any, '==', 'c', 'b', 'a'); // true
// @debug has-values(('a', 'b', 'd', 'c', 'e', 'f'), any, '==', 'a', 'd', 'b', 'c'); // true

// false
// @debug has-values(('a', 1, 'c'), any, '==', 2); // false
// @debug has-values(('a', 'b', 'c'), any, '==', true); // false

// all true
// @debug has-values(('a', 'a', 'a'), all, '==', 'a'); // true
// @debug has-values(('a', 'b', 'c', 1), all, '==', 1); // true
// @debug has-values(('a', 'b', 'c'), all, '==' ,'a', 'b'); // true
// @debug has-values(('a', 'b', 'c', 'd'), all, '==', 'a', 'b', 'd'); // true

// all false
// Checks whether the list has all given values.
// @debug has-values(('a', 'b', 'c'), all, '==', 'a', 1); // false
// @debug has-values(('a', 'b', 'c'), all, '==', 'a', 'b', 'c', 'd'); // false
// @debug has-values(('a', 'b', 'c'), all, '>', 2); // false

// Checks whether the list has not all given values.
// Checks whether the list has values all different from the given.
// @debug has-values(('a', 'b', 'c'), all, '!=', 'a', 'b'); // true
// @debug has-values(('a', 'b', 'c'), all, '==', 'd'); // false
// @debug has-values(('a', 'b', 'c'), all, '==', 'a', 'b', 'c', 'd'); // false

// only true
// @debug has-values(('a', 'a', 'a'), only, '==', 'a'); // true
// @debug has-values(('a', 'b', 'c'), only, '==', 'a'); // false
// @debug has-values(('a', 'b', 'c'), only, '!=', 'a'); // false
// @debug has-values((1, 1, 1, 1), only, '==', 1); // true
// @debug has-values((null, null, null), only, '==', null); // true
// @debug has-values((false, false, false), only, '==', false); // true

// only false
// @debug has-values(('a', 1, 'c'), only, '==', 2); // false
// @debug has-values(('a', 'b', 'c'), only, '==', true); // false

// @debug has-values((4, 5, 6), only, '>', 3); // true
// @debug has-values((4, 5, 6, 'a', 'bold king'), only, '!=', 3); // true

// @debug has-values((4, 5, 6), only, '>', 3); // true
// @debug has-values((4, 5, 6), only, '>', 3); // true
// @debug has-values((4, 5, 6), only, '!=', 3); // true

// Multiple.
// @debug has-values(('a', 'b', 'c'), any, true, any '==' 'a' 'b' 'c' 'd', all '==' 'c' 'b'); // true
// @debug has-values(('a', 'b', 'c'), all, true, any '==' 'a' 'b' 'c' 'd', all '==' 'c' 'b'); // true
// @debug has-values(('a', 'b', 'c'), all, true, all '==' 'a' 'b' 'c' 'd', all '==' 'c' 'b'); // false
// @debug has-values(('a', 'b', 'c'), all, true, any '==' 'a' 'b' 'c' 'd', all '==' 'c' 'b', all '>' 3); // false
// @debug has-values((1, 2, 3), all, true, all '>=' 1, any '<' 3); // true
// @debug has-values(((1, 2, 3), 4, 5, 6), all, true, any '(,)==' 3, any '>' 3); // true
