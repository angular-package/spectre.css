// Sass.
@use 'sass:list';
@use 'sass:meta';

// Modules.
@use '../function';

// Status: DONE
// The `values.call()` mixin.
@function call($values, $name: null, $prefix: function.$prefix, $dictionary: (), $function: function.$function, $list: true) {
  // FEATURE: --function params
  @if function.has($values, $name, $prefix, $function) {
    @return function.call($values, $name, $prefix, $dictionary, $function);
  }

  // $values: if(not (meta.type-of($values) == list), ($values,), $values); // REVIEW: check.
  @for $i from 1 through list.length($values) {
    $value: list.nth($values, $i);
    @if type-of($value) == list or type-of($value) == map {
      // FEATURE: something (--function params) or something (--function: params)
      @if function.has($value, $name, $prefix, $function) {
        $values: list.set-nth($values, $i, function.call($value, $name, $prefix, $dictionary, $function));

      // FEATURE: (something (--function params), something (--function: params))
      } @else {
        @if type-of($value) == list and list.length($value) > 0 {
          $j: 1;
          @each $-value in $value {
            @if type-of($-value) == list or type-of($-value) == map {
              @if function.has($-value, $name, $prefix, $function) {
                $value: list.set-nth($value, $j, function.call($-value, $name, $prefix, $dictionary, $function));
              }
            }

            $j: $j + 1;
          }

          $values: list.set-nth($values, $i, $value);
        }
        @if $list and not $name {
          $values: list.set-nth($values, $i, function.call($value, null, null, $dictionary, $function));
        }
      }
    }
  }
  @return $values;
}

// Possibilities.
// 5px (unit 1) 10px (unit 2)
// 5px (get: unit 1) 10px (get: unit 2)
// 5px solid (color: primary dark)
// (--get unit 2) 5px (--color primary dark)

// Examples.
// list
// @debug call((primary dark) ()); // var(--s-primary-dark) ()
// @debug call((primary dark) (gray light)); // var(--s-primary-dark) var(--s-gray-light)
// @debug call(--nest (top, left) color); // top color, left color

// list false
// @debug call((primary dark) (gray light), $list: false); // (primary dark) (gray light)

// list with --color, --get, --nest
// @debug call(--get unit 2); // (var(--s-unit-2),)
// @debug call(--color primary dark); // var(--s-primary-color-dark)
// @debug call((--get unit 2) (--get unit 1)); // var(--s-unit-2) var(--s-unit-1)
// @debug call((--get unit 2) (--nest (padding, margin) top)); // var(--s-unit-2) (padding top, margin top)

// map
// @debug call((--get: unit 5)); // (var(--s-unit-5),)
// @debug call((--color: primary dark)); // (var(--s-primary-color-dark),)
// @debug call((--get: unit 2) (--get: unit 3) (--get: unit 4)); // var(--s-unit-2) var(--s-unit-3) var(--s-unit-4)
// @debug call((--get: unit 2) (--color: primary dark)); // var(--s-unit-2) var(--s-primary-color-dark)
// @debug call((--get: unit 2)); // (var(--s-unit-2),)
// @debug call(1px (--get: unit 2) 10px (--get: border width sm)); // 1px var(--s-unit-2) 10px var(--s-border-width-sm)

// important
// @debug call(1px !important); // 1px !important
// @debug call((unit 2) (--color: primary dark) !important); // var(--s-unit-2) var(--s-primary-color-dark) !important

// adjust
// @debug call(1px (unit 2) 10px (border width sm ('*' 2))); // 1px var(--s-unit-2) 10px calc(var(--s-border-width-sm) * 2)
// @debug call(1px (unit 2 ('+' 15)) 10px (border width sm)); // 1px calc(var(--s-unit-2) + 15) 10px var(--s-border-width-sm)
// @debug call((unit 1 ('+' 15)) (unit 2)); // calc(var(--s-unit-1) + 15) var(--s-unit-2)
// @debug call(1px (--color (primary dark) 15deg)); // 1px hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15deg), var(--s-primary-color-dark-a))

// specific name
// @debug call(--nest (top, left) color, nest); // top color, left color
// @debug call((--nest (top, left) color) (--get unit 2), nest); // (top color, left color) (--get unit 2)
// @debug call((--nest (top, left) color) (--get unit 2), nest get); // (top color, left color) var(--s-unit-2)

// prefix empty
// $empty-prefix: '';
// @debug call((get: unit 5), $prefix: $empty-prefix); // (var(--s-unit-5),)
// @debug call((color: primary dark), $prefix: $empty-prefix); // (var(--s-primary-color-dark),)
// @debug call((color: primary dark) (color: gray light), $prefix: $empty-prefix); // var(--s-primary-color-dark) var(--s-gray-color-light)
// @debug call((get: unit 2) (get: unit 3) (get: unit 4), $prefix: $empty-prefix); // var(--s-unit-2) var(--s-unit-3) var(--s-unit-4)
// @debug call(10px (get: unit 3) 5px (get: unit 2), $prefix: $empty-prefix); // 10px var(--s-unit-3) 5px var(--s-unit-2)
// @debug call(1px (primary color dark) 10px (border width small), $prefix: $empty-prefix); // 1px var(--s-primary-color-dark) 10px var(--s-border-width-small)

// prefix __
// @debug call(__nest (top, left) color, $prefix: __); // top color, left color

// prefix + dictionary
// @debug call(__get unit 2, $prefix: __, $dictionary: (unit: u)); // var(--s-u-2)

// @debug call((3px 3px (primary dark), 3px 4px (dark color)), $list: false); // 3px 3px (primary dark), 3px 4px (dark color)
// @debug call(3px 3px --get red); // var(--s-3px-3px-red)
// @debug call(3px 3px (--get red)); // 3px 3px var(--s-red)
// @debug call(3px 3px (--get: red)); // 3px 3px var(--s-red)
// @debug call((3px 3px (--get red), -1em 0 0.4em (--color: olive)), $list: false); // 3px 3px var(--s-red), -1em 0 0.4em var(--s-olive-color)
