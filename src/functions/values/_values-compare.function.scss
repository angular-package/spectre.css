// Sass.
@use 'sass:list';

// Functions.
@use '../compare.function' as *;
@use '../map/map-get-default.function' as *;

// Status: DONE
// The `values-compare()` function.
// ? $occurrence: any/all/only
// ? $operator: '==', '!=', '~=', '!~=', ':==', ':!=', '>', '>=', '<', '<=',
// ?            '(:)', '(:)==', '(:)!=', '(:)>', '(:)>=', '(:)<', '(:)<=',
// ?            '(,)', '(,)==', '(,)!=', '(,)>', '(,)>=', '(,)<', '(,)<='
@function values-compare($values, $comparisons...) {
  $result: ();
  @each $comparison in $comparisons {
    $occurrence: list.nth($comparison, 1);
    $comparison-result: ();
    @for $i from 3 through list.length($comparison) {
      $comparison-result: list.append(
        $comparison-result,
        -has($occurrence, $values, list.nth($comparison, 2), list.nth($comparison, $i))
      );
    }

    @if $occurrence == all or $occurrence == only {
      $comparison-result: if(list.index($comparison-result, false), false, true);
    }
    @if $occurrence == any {
      $comparison-result: if(list.index($comparison-result, true), true, false);
    }

    $result: list.append($result, $comparison-result);
  }
  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Private helper `-has()` function.
@function -has($occurrence, $values, $operator, $operand) {
  $has: if(list.index(all any, $occurrence), false, true);
  @each $value in $values {
    @if $occurrence == only and not compare($value $operator $operand...) {
      @return false;
    }
    @if list.index(all any, $occurrence) and compare($value $operator $operand...) {
      @return true;
    }
  }
  @return $has;
}

// Examples.
// single comparison - any true
// @debug values-compare(('a', 'a', 'a'), any '==' 'a'); // true
// @debug values-compare(('a', 'b', 'c'), any '==' 'b'); // true
// @debug values-compare(('a', 'a', 'a'), any '==' 'a' 'b' 'c' 'd'); // true
// @debug values-compare(('b', 'c', 'a'), any '!=' 'a'); // true
// @debug values-compare(('b', 'c', 'a'), any ':!=' number); // true
// @debug values-compare(('bold king', 'c', 'a'), any '~=' 'bold'); // true
// @debug values-compare(('a', 'a', 'a', null), any '==' null); // true
// @debug values-compare(('a', 'a', 'a', false), any '==' false); // true

// single comparison - any false
// @debug values-compare(('aa', 'b', 'c'), any '==' 'a'); // false
// @debug values-compare(('a', 'a', 'a'), any '==' 'c'); // false
// @debug values-compare(('a', 'b', 'c'), any '==' 'd'); // false
// @debug values-compare(('a', 'a', 'a'), any '==' null); // false
// @debug values-compare(('a', 'a', 'a'), any '!=' 'a'); // false

// single comparison - all true
// @debug values-compare(('a', 'a', 'a'), all '==' 'a'); // true
// @debug values-compare(('a', 'a', 'a'), all '!=' 'c'); // true

// single comparison - all false
// @debug values-compare(('a', 'b', 'c'), all '==' 'a' 'b' 1); // false
// @debug values-compare(('a', 'a', 'a'), all '!=' 'a'); // false
// @debug values-compare(('a', 'b', 'c'), all '~=' 1); // false

// single comparison - only true
// @debug values-compare(('a', 'a', 'a'), only '==' 'a'); // true
// @debug values-compare(('a', 'a', 'a', 'd'), only ':==' string); // true
// @debug values-compare((1, 1, 1), only '==' 1); // true
// @debug values-compare((false, false, false), only '==' false); // true
// @debug values-compare((true, true, true), only '==' true); // true
// @debug values-compare(((a: 1), (a: 1), (a: 1)), only '==' (a: 1)); // true
// @debug values-compare(('a', 'a', 'a'), only '!=' 'b'); // true
// @debug values-compare(('bold king', 'bold king', 'bold king', 'bold king'), only '~=' 'bold'); // true
// @debug values-compare((5, 3, 2, 1, 0), only ':==' number); // true
// @debug values-compare((5, 3, 2, 1), only '>' 0); // true
// @debug values-compare((null, null, null, null), only '==' null); // true

// only false
// @debug values-compare(('a', 'a', 'a'), only '!=' 'a'); // false
// @debug values-compare(('a', 'a', 'a', 1), only ':==' string); // false
// @debug values-compare(('bold king', 'bold king', 'bold king', 'bold king'), only '!~=' 'bold'); // false
// @debug values-compare(('a', 'a', 'a', 1, null), only ':==' number); // false
// @debug values-compare((5, 3, 2, 1, 0), only '>' 1); // false

// multiple comparisons
// @debug values-compare((false, false, false, false, false, false), (only '==' true), (only '==' false), (only '==' null)); // false true false
// @debug values-compare((14, 511, 63), (all, '>', 2), (any, '<', 27), (any, '<', 512)); // true true true
// @debug values-compare((14, 511, 63), (all, '==', 2), (any, '<', 27), (any, '<', 512)); // false true true
// @debug values-compare((14, 511, 63), (any, '==', 2), (any, '<', 27), (any, '<', 512)); // false true true
// @debug values-compare((14, 511, 63), (any, '==', 2), (any, '<', 27), (any, '<', 512)); // false true true

// @debug values-compare((14, 511, 63, 1, 22, 34), (any, '==', 2), (any, '<', 27), (any, '<', 512), any '>' 34, ); // false true true true
// @debug values-compare((14, 511, 63, 1, 22, 34), (any, '==', 2), (any, '<', 27), (any, '<', 512)); // false true true
// @debug values-compare((14, 511, 63, 1, 22, 34), (any, '==', 2), (any, '<', 1), (any, '>', 511)); // false false false
// @debug values-compare((14, 511, 63, 1, 22, 34), (all, ':!=', number), (all, '>', 512),); // false false

// @debug values-compare((14, 511, 63, 'a', 'b', 'c'), (any, '==', 2), (any, '==', 'a'), (any, '<', 512)); // false true true
// @debug values-compare((14, 511, 63, 'a', 'b', 'c'), (any, '!=', 2), (any, '<', 27), (any, '<', 512)); // true true true

// compare list length
// @debug values-compare(((14, 511, 63), (2, 4, 5, 6), (a, b, c, d, e, f), (1 2 3 4 5 6 7)), any '(,)>' 5, any '(,)<' 3, any '(,)==' 4); // true false true
// @debug values-compare(((14, 511, 63), (2, 4, 5, 6), (a, b, c, d, e, f), (1 2 3 4 5 6 7)), only '(,)>' 5, only '(,)>' 2, all '(,)==' 4 3); // false true true

// compare map length
// @debug values-compare(((14: 1, 511: a, 63: b), (2: c, 4: d, 5: e, 6: f), (a: g, b: h, c: i, d: j, e: k, f: l)), any '(:)>' 5, any '(:)<' 3, any '(:)==' 4); // true false true
