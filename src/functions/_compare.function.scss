// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// Functions.
@use 'string/string-replace.function' as *;

// Status: DONE
// The `compare()` function.
@function compare($value, $operator, $operand) {
  // Check the list length.
  @if string.index($operator, '(,)') {
    $operator: string-replace($operator, '(,)', '');
    $value: list.length($value);
  } @else if string.index($operator, '(:)') {
    $operator: string-replace($operator, '(:)', '');
    $value: list.length(map.keys($value));
  }

  @if $operator == '==' {
    @return $value == $operand;

  // Type of the given value equal or not equal to operand.
  } @else if list.index((':==', ':!='), $operator) {
    $value: meta.type-of($value);
    $operand: if(not $operand, meta.type-of($operand), $operand);

    @if string.index($operator, ':==') {
      @return $value == $operand;
    } @else if string.index($operator, ':!=') {
      @return $value != $operand;
    }

  // Type of the given value equal or not equal to operand.
  } @else if list.index(('~=', '!~='), $operator) {
    $result: (
      meta.type-of($value) == string and
      meta.type-of($operand) == string and
      string.index($value, $operand)
    ) or false;

    @return if($operator == '~=', if($result, true, false), not $result);

  } @else if $operator == '!=' {
    @return $value != $operand;

  } @else if $operator ==  '>' {
    @return (
      type-of($value) == number and
      type-of($operand) == number and
      $value > $operand
    ) or false;

  } @else if $operator ==  '>=' {
    @return (
      type-of($value) == number and
      type-of($operand) == number and
      $value >= $operand
    ) or false;

  } @else if $operator ==  '<' {
    @return (
      type-of($value) == number and
      type-of($operand) == number and
      $value < $operand
    ) or false;

  } @else if $operator ==  '<=' {
    @return (
      type-of($value) == number and
      type-of($operand) == number and
      $value <= $operand
    ) or false;
  }
  @return false;
}

// Operator.
// '==', // equal to
// '!=', // not equal to
// '~=', // text contains the given string (string.index())
// '!~=', // text does not contain the given string (string.index())
// ':==', // type of the given value is equal to the given type
// ':!=',  // type of the given value is not equal to the given type
// '>',
// '>=',
// '<',
// '<='
// ':' type
// '(:)' map keys length
// '(,)' list length

// Examples.
// ==
// @debug compare(27, '==', 27); // true
// @debug compare('there is a word', '==', 'there is a word'); // true
// @debug compare(null, '==', null); // true
// @debug compare((a: 2222), '==', ('a': 2222)); // true

// !=
// @debug compare(27, '!=', 27); // true
// @debug compare('there is a word', '!=', 'there is a word'); // true
// @debug compare(null, '!=', null); // true
// @debug compare((a: 2222), '!=', ('a': 2222)); // true

// :==
// @debug compare('a', ':==', string); // true
// @debug compare(3, ':!=', string); // true
// @debug compare(null, ':==', null); // true
// @debug compare(false, ':==', bool); // true

// :!=
// @debug compare(27, ':!=', string); // true
// @debug compare('a', ':!=', string); // false
// @debug compare(null, ':!=', null); // false
// @debug compare(false, ':!=', bool); // false

// ~=
// @debug compare('bold king', '~=', 'bold'); // true

// !~=
// @debug compare('bold king', '!~=', 'word'); // true
// @debug compare('bold king', '!~=', 'bold'); // false

// >
// @debug compare(3, '>', 1); // true
// @debug compare(3, '>', 5); // false

// >=
// @debug compare(3, '>=', 1); // true
// @debug compare(3, '>=', 3); // true

// <
// @debug compare(3, '<', 1); // false
// @debug compare(3, '>', 5); // true

// <=
// @debug compare(3, '<=', 1); // false
// @debug compare(3, '<=', 3); // true

// (,)==
// @debug compare(('a', 'b', 'c'), '(,)==', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)==', 13); // false

// (,)!=
// @debug compare(('a', 'b', 'c'), '(,)!=', 3); // false
// @debug compare(('a', 'b', 'c'), '(,)!=', 13); // true

// (,)>
// @debug compare(('a', 'b', 'c'), '(,)>', 2); // true
// @debug compare(('a', 'b', 'c'), '(,)>', 3); // false

// (,)>=
// @debug compare(('a', 'b', 'c'), '(,)>=', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)>=', 4); // false

// (,)<
// @debug compare(('a', 'b', 'c'), '(,)<', 4); // true
// @debug compare(('a', 'b', 'c'), '(,)<', 3); // false

// (,)<=
// @debug compare(('a', 'b', 'c'), '(,)<=', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)<=', 2); // false

// (:)==
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 3); // true
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 4); // false

// (:)!=
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 3); // false
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 2); // true

// (:)> (:)<
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)>', 3); // false
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)<', 2); // false
