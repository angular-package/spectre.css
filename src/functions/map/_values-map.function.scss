// Sass.
@use 'sass:list';
@use 'sass:map';

// The `values-map()` function returns map built from the given `$list` under the given `$keys`.
@function values-map($list, $keys...) {
  $map: ();
  @if list.length($list) > 0 {
    $index: 1;

    @each $value in $list {
      @if type-of($value) != map {
        $key: list.nth($keys, $index);
        @if type-of($key) == map {
          @each $k, $type in $key {
            // If value can be more than one type.
            @if list.length($type) > 1 {
              @each $t in $type {
                @if type-of($value) == $t {
                  $map: map.set($map, $k, $value);
                }
              }
            } @else if type-of($value) == $type {
              // @warn '#{$k} #{$type} #{$value}';
              $map: map.set($map, $k, $value);
            }
          }
        } @else {
          $map: map.set($map, $key, $value);
        }
        $index: $index + 1;
      }
    }

    @each $value in $list {
      @if type-of($value) == map {
        @each $key in $keys {
          @if type-of($key) != map {
            @if map.has-key($value, $key) {
              $map: map.set($map, $key, map.get($value, $key));
            }
          } @else {
            @each $k, $type in $key {
              @if list.length($type) > 1 {
                @each $t in $type {
                  @if type-of(map.get($value, $k)) == $t {
                    $map: map.set($map, $k, map.get($value, $k));
                  }
                }
              } @else if type-of(map.get($value, $k)) == $type {
                $map: map.set($map, $k, map.get($value, $k));
              }
            }
          }
        }
      }
    }
  } @else {
    $map: map.set($map, list.nth($keys, 1), $list);
  }
  @return $map;
}
