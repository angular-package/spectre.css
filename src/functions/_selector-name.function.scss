// Sass.
@use 'sass:list';

// Functions.
@use 'class/class-name.function' as *;
@use 'list/index/list-index.function' as *;
@use 'list/nth/list-nth-from.function' as *;
@use 'list/nth/list-nth-to.function' as *;
@use 'string/string-replace.function' as *;
@use 'name.function' as *;

// Status: DONE
// The `selector-name()` function.
@function selector-name($name, $dictionary: (), $separator: null) {
  @each $index in list-index($name, any, '==', '&', '&.', '.') {
    @if type-of($index) == number {
      $class: class-name(list-nth-from($name, $index), $dictionary, $separator);
      $tag: if($index > 1, list-nth-to($name, $index - 1), null);
      @return '#{name($tag)}#{if($tag, string-replace($class, all "&" ""), $class)}';
    }
  }
  @return name($name);
}

// Examples.
// @debug selector-name('a' 'b' 'c'); // abc
// @debug selector-name('.' 'a' 'b' 'c'); // .abc
// @debug selector-name('.' __CLASS__ 'a' 'b' 'c'); // .__CLASS_abc
// @debug selector-name(__CLASS__ 'a' 'b' 'c', $dictionary: ('a': 'ccc')); // __CLASS__abc
// @debug selector-name('a' 'b' 'c', $dictionary: ('a': 'ccc')); // abc
// @debug selector-name('&' 'a' 'b' 'c'); // &abc
// @debug selector-name('&.' 'a' 'b' 'c'); // &.abc
// @debug selector-name('&' '.' 'a' 'b' 'c'); // &.abc
// @debug selector-name('span' '&' '.' 'a' 'b' 'c'); // span.abc

// hover
// @debug selector-name('span' '&' '.' 'a' 'b' 'c' '&:hover'); // span.abc:hover

// Tag.
// @debug selector-name('s' 'p' 'a' 'n' '[disabled=""]' '&' '.' 'border' 'width'); // span[disabled=""].borderwidth
// @debug selector-name('s' 'p' 'a' 'n' '[aria=""]' '&' '.' 'border' 'width'); // span[aria=""].borderwidth
// @debug selector-name('s' 'p' 'a' 'n' '[attr="aaa"]' '&.' 'border' 'width'); // span[attr="aaa"].borderwidth
// @debug selector-name('s' 'p' 'a' 'n' '[attr="aaa"]' '.' 'border' 'width'); // span[attr="aaa"].border-width
