// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../class/class.name.function' as class;
@use 'selector.nest.function' as *;

// Status: DONE
// The `class()` function.
@function class($name, $selector: (), $dictionary: ()) {
  $i: 1;
  $-dictionary: map.merge($dictionary, (prefix: null, suffix: null));
  @each $value in $name {
    $indicator: if($i == 1, '.', if(list.nth($name, 1) == '&.', '&', '&' ''));
    $resolved-dictionary: if(
      $i == 1,
      map.merge($dictionary, (suffix: null)),
      if($i == list.length($name), map.merge($dictionary, (prefix: null)), $-dictionary)
    );
    @if type-of($value) == string {
      $name: list.set-nth($name, $i, class.name(list.join($indicator, $value), $resolved-dictionary));
    } @else if type-of($value) == list {
      $j: 1;
      @each $element in $value {
        $value: list.set-nth($value, $j, class.name(list.join($indicator, $element), $resolved-dictionary));
        $j: $j + 1;
      }

      $name: list.set-nth($name, $i, $value);
    }

    $i: $i + 1;
  }
  @if list.nth($name, 1) == '&.' {
    $name: list.set-nth($name, 1, '&.#{__CLASS__}');
  }
  @return nest(list.join($name, $selector, list.separator($name)));
}

// Examples.
// @debug class(border); // (.border,)
// @debug class(border width lg); // (.border-width-lg,)
// @debug class(('border', 'width', 'lg')); // (.border-width-lg,)
// @debug class('card' ('header' 'body' 'footer')); // (.card-header .card-body .card-footer,)

// with parent selector
// @debug class('&border'); // (&.border,)
// @debug class('&' ('header', 'body', 'footer')); //  &.header, &.body, &.footer
// @debug class(('&card', ('header', 'body', 'footer', ))); // &.card-header, &.card-body, &.card-footer
// @debug class(('&card', ('header', 'body',  'footer'), 'silver')); // &.card-header-silver, &.card-body-silver, &.card-footer-silver

// translated with dictionary
// @debug class(border, $dictionary: (prefix: p)); // (.p-border,)
// @debug class(border width xs, $dictionary: (prefix: p, suffix: s)); // (.p-border-width-xs-s,)
// @debug class(border width xs, $dictionary: (prefix: p, suffix: s, separator: '--')); // (.p--border--width--xs--s,)
// @debug class(('card', ('header', 'body', 'footer', ), 'silver'), $dictionary: ('silver': 'primary')); // .card-header-primary, .card-body-primary, .card-footer-primary
// @debug class(('card', ('header', 'body', 'footer', ), 'silver'), $dictionary: (prefix: s, suffix: p, 'silver': 'primary')); // .s-card-header-primary-p, .s-card-body-primary-p, .s-card-footer-primary-p
// @debug class(('&card', '&border') ('header', 'body')); // &.card-header, &.card-body, &.border-header, &.border-body

// with $selector
// @debug class(border, '&:hover'); // (.border:hover,)
// @debug class(border, '.lg'); // (.border .lg,)
// @debug class(border, '&.lg'); // (.border.lg,)
// @debug class(border, ('.lg', '&:hover')); // (.border .lg:hover,)
