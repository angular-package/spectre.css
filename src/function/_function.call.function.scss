// Sass.
@use 'sass:meta';

// Variables
@use 'variables';

// Functions.
@use 'function.get.function' as *;
@use 'function.has.function' as *;
@use 'function.pick.function' as *;
@use 'function.remove.function' as *;

// Status: TODO: add combine() function.
// The `call()` function.
@function call($value, $dictionary: (), $function: variables.$function) {
  @if type-of($value) == list {
    @if has($value, $function: $function) {
      @if type-of($dictionary) == map {
        @return meta.call(pick($value, $function: $function), remove($value, $function: $function), $dictionary: $dictionary);
      }
      @return meta.call(pick($value, $function: $function), remove($value, $function: $function));
    }
  } @else if type-of($value) == map {
    @each $name, $value in $value {
      @if has($name, $function: $function) {
        @if type-of($dictionary) == map {
          @return meta.call(pick($name, $function: $function), remove($value, $function: $function), $dictionary: $dictionary);
        }
        @return meta.call(pick($name, $function: $function), remove($value, $function: $function));
      }
    }
  }
  @return $value;
}

// Examples.
// @debug call(--get unit 2); // var(--s-unit-2)
// @debug call(--get unit 5); // var(--s-unit-5)
// @debug call(--color primary dark); // var(--s-primary-color-dark)
// @debug call(--nest (padding, margin) (top, bottom)); // padding top, padding bottom, margin top, margin bottom
// @debug call(--combine padding margin top bottom); // TODO: arbitrary parameter

// map
// @debug call((--get: unit 2)); // var(--s-unit-2)
// @debug call((--color: secondary light)); // var(--s-secondary-color-light)

// no function
// @debug call(unit 2); // unit 2
// @debug call(unit 5, (unit: u)); // unit 5

// dictionary
// @debug call(--get unit 5, (unit: u)); // var(--s-u-5)

// adjust
// @debug call(--get unit 5 ('+' 15%)); // calc(var(--s-unit-5) + 15%)
// @debug call(--get unit 5 ('/' 15%)); // calc(var(--s-unit-5) / 15%)
// @debug call(--get unit 5 ('*' 15%)); // calc(var(--s-unit-5) * 15%)

// @debug call(--color (primary dark) 15%); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), var(--s-primary-color-dark-a))
// @debug call(--color (primary dark) 15% 0.5); // hsla(var(--s-primary-color-dark-h), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.5))
// @debug call(--color (primary dark) 15% 0.5 5%); // hsla(calc(var(--s-primary-color-dark-h) + 15%), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 0.5), calc(var(--s-primary-color-dark-a) + 5%))
// @debug call(--color (primary dark) 15deg 5% 15% 0.1); // hsla(calc(var(--s-primary-color-dark-h) + 15deg), calc(var(--s-primary-color-dark-s) + 5%), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.1))
