// Sass.
@use 'sass:list';

// @use 'sass:map';
@use 'sass:meta';

// Modules.
@use '../../string';

// Functions.
@use '../../selector/selector.class.function' as *;
@use '../../values/values.combine.function' as *;

// Status: REVIEW:
// The `variant-combine()` mixin.
@mixin variant-combine($variant, $pseudo-class: (), $dictionary: (), $function: meta.get-function("class")) {
  @each $class, $attribute-value in $variant {
    $-class: ();
    @if type-of($attribute-value) == map {
      @each $attribute, $value in $attribute-value {
        @if type-of($value) == map {
          @each $value-class, $value in $value {
            $-class: ();
            $-value-class: ();
            @each $class in if(list.separator($class) == comma, $class, ($class,)) {
              @each $attribute in if(list.separator($attribute) == comma, $attribute, ($attribute,)) {
                $-value-class: $value-class;
                @each $value-class in if(list.separator($value-class) == comma, $value-class, ($value-class,)) {
                  $-class: list.append($-class, meta.call($function, combine(if(&, '&', ()), $class, $attribute, $value-class), $pseudo-class, $dictionary), $separator: comma);
                }
              }
            }

            #{$-class} {
              @content($class, $attribute, $-value-class, $value);
            }
          }
        } @else {
          @each $value in $value {
            $-class: ();
            @each $class in if(list.separator($class) == comma, $class, ($class,)) {
              @each $attribute in if(list.separator($attribute) == comma, $attribute, ($attribute,)) {
                $-class: list.append($-class, meta.call($function, combine(if(&, '&', ()), $class, $attribute), $pseudo-class, $dictionary), $separator: comma);
              }
            }
          }

          #{$-class} {
            @content($class, $attribute, $value);
          }
        }
      }
    } @else {
      @each $value in $attribute-value {
        $-class: ();
        @each $class in if(list.separator($class) == comma, $class, ($class,)) {
          $-class: list.append($-class, meta.call($function, combine(if(&, '&', ()), $class), $pseudo-class, $dictionary), $separator: comma);
        }
      }

      #{$-class} {
        @content($class, $attribute-value);
      }
    }
  }
}
