// Sass.
@use 'sass:list';
@use 'sass:meta';

// Functions.
@use '../../values/values.combine.function' as *;
@use '../functions/var.get.function' as *;
@use '../functions/var.name.function' as var;

// Mixins.
@use '../../selector/selector.content.mixin' as *;

// Status: DONE
// The `set()` mixin defines the CSS variables based on the given `$values`.
@mixin set($values, $selector: ((':root', ':host'),), $dictionary: (), $function: meta.get-function('get')) {
  @if type-of($values) == map {
    @include content($selector) {
      @each $name, $variant in $values {
        @if type-of($variant) == map {
          @each $variant-name, $value in $variant {
            @each $name in if(list.separator($name) == comma, $name, ($name,)) {
              @if type-of($value) == map {
                @each $value-name, $value in $value {
                  @if type-of($value) == list and $function {
                    $value: #{meta.call($function, $value, $dictionary: $dictionary)};
                  }

                  #{var.name(combine($name, $variant-name, $value-name), $dictionary)}: #{$value};
                }
              } @else {
                @if type-of($value) == list and $function {
                  $value: #{meta.call($function, $value, $dictionary: $dictionary)};
                }

                #{var.name(combine($name, $variant-name), $dictionary)}: #{$value};
              }
            }
          }
        } @else {
          $value: $variant;
          @if type-of($value) == list and $function {
            $value: #{meta.call($function, $value, $dictionary: $dictionary)};
          }
          @each $name in if(list.separator($name) == comma, $name, ($name,)) {
            #{var.name($name, $dictionary)}: #{$value};
          }
        }
      }
    }
  }
}
